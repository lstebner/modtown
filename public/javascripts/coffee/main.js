// Generated by CoffeeScript 1.6.3
(function() {
  var Alert, Block, BuildMenu, Calendar, Crop, ErrorAlert, Factory, Farm, FloatingMenu, FluxMenu, FundsNotAvailableAlert, HUD, HireWorkersMenu, Housing, ModTownGame, Player, RenderedObject, Resident, ResidentMenu, SelectCropMenu, SelectHouseMenu, SelectJobMenu, StateManager, Street, Structure, Timer, Town, VisitorMenu, WeatherSystem, WorldClock, crop, key, pin, some_crop_menu_items, some_crops, _auto_id, _house_ids, _house_idx, _next_house_name, _next_id, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Calendar = (function() {
    function Calendar() {}

    Calendar.days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    Calendar.months = ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth', 'Nineth', 'Tenth', 'Eleventh', 'Twelvth', 'Thirteenth', 'Fourteenth', 'Fifteenth', 'Sixteenth'];

    Calendar.get_month = function(index) {
      if (index >= Calendar.months.length) {
        return false;
      }
      return Calendar.months[index];
    };

    Calendar.get_day = function(index) {
      if (index >= Calendar.days.length) {
        return false;
      }
      return Calendar.days[index];
    };

    return Calendar;

  })();

  World.Calendar = Calendar;

  /* --------------------------------------------
       Begin Timer.coffee
  --------------------------------------------
  */


  Timer = (function() {
    function Timer(duration, on_complete, on_tick) {
      this.duration = duration != null ? duration : 0;
      this.on_complete = on_complete != null ? on_complete : null;
      this.on_tick = on_tick != null ? on_tick : null;
      this.ticks = 0;
      this.timeout = null;
      this.state = new StateManager('init');
      this.allow_auto_start = true;
    }

    Timer.prototype.on = function(what, fn) {
      switch (what) {
        case 'on_tick':
          return this.on_tick = fn;
        case 'complete':
          return this.on_complete = fn;
      }
    };

    Timer.prototype.start = function(repeat, tick_every) {
      var _this = this;
      if (repeat == null) {
        repeat = false;
      }
      if (tick_every == null) {
        tick_every = 1000;
      }
      this.state.change_state('running');
      if (repeat) {
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        return this.timeout = setTimeout(function() {
          return _this.update(true, tick_every);
        }, tick_every);
      }
    };

    Timer.prototype.pause = function() {
      return this.state.change_state('paused');
    };

    Timer.prototype.stop = function() {
      return this.state.change_state('stopped');
    };

    Timer.prototype.resume = function() {
      return this.state.change_state('running');
    };

    Timer.prototype.tick = function() {
      this.ticks += 1;
      if (typeof this.on_tick === "function") {
        this.on_tick(this.ticks);
      }
      if (this.duration > 0 && this.ticks >= this.duration) {
        return this.finish();
      }
    };

    Timer.prototype.update = function() {
      this.state.update();
      switch (this.state.current()) {
        case 'idle':
          if (this.allow_auto_start) {
            return this.start();
          }
          break;
        case 'reset':
          return this.start();
        case 'running':
          return this.tick();
        case 'stopped':
          if (this.timeout) {
            clearTimeout(this.timeout);
          }
          return this.reset();
      }
    };

    Timer.prototype.remaining = function() {
      return this.duration - this.ticks;
    };

    Timer.prototype.remaining_percent = function() {
      return (this.duration - this.ticks) / this.duration;
    };

    Timer.prototype.percent_complete = function() {
      return Math.min(1, this.ticks / this.duration);
    };

    Timer.prototype.is_complete = function() {
      return this.ticks >= this.duration;
    };

    Timer.prototype.is_running = function() {
      return this.state.current() === "running";
    };

    Timer.prototype.finish = function() {
      if (typeof this.on_complete === "function") {
        this.on_complete();
      }
      return this.state.change_state('complete');
    };

    Timer.prototype.reset = function() {
      this.ticks = 1;
      return this.state.change_state('reset');
    };

    Timer.prototype.set_duration = function(new_dur, reset) {
      if (reset == null) {
        reset = false;
      }
      if (new_dur > -1) {
        this.duration = new_dur;
      }
      if (reset) {
        return this.reset();
      }
    };

    return Timer;

  })();

  World.Timer = Timer;

  /* --------------------------------------------
       Begin WorldClock.coffee
  --------------------------------------------
  */


  WorldClock = (function() {
    WorldClock.max_seconds = 60;

    WorldClock.max_minutes = 60;

    WorldClock.minutes_in_hour = WorldClock.max_minutes;

    WorldClock.max_hours = 10;

    WorldClock.hours_in_day = WorldClock.max_hours;

    WorldClock.max_days = 30;

    WorldClock.days_in_month = WorldClock.max_days;

    WorldClock.max_months = 16;

    WorldClock.months_in_year = WorldClock.max_months;

    WorldClock.days_in_year = WorldClock.max_days * WorldClock.max_months;

    WorldClock.seconds_in_minute = WorldClock.max_seconds;

    WorldClock.seconds_in_hour = WorldClock.seconds_in_minute * WorldClock.max_minutes;

    WorldClock.seconds_in_day = WorldClock.seconds_in_hour * WorldClock.max_hours;

    WorldClock.seconds_in_month = WorldClock.seconds_in_day * WorldClock.max_days;

    WorldClock.seconds_in_year = WorldClock.seconds_in_month * WorldClock.max_months;

    WorldClock.duration = function(amount, of_what) {
      var in_seconds;
      if (of_what == null) {
        of_what = 'seconds';
      }
      in_seconds = 0;
      switch (of_what) {
        case 'seconds' || 's':
          in_seconds = amount;
          break;
        case 'minutes' || 'm':
          in_seconds = amount * WorldClock.seconds_in_minute;
          break;
        case 'hours' || 'h':
          in_seconds = amount * WorldClock.seconds_in_hour;
          break;
        case 'days' || 'd':
          in_seconds = amount * WorldClock.seconds_in_day;
          break;
        case 'months' || 'mo':
          in_seconds = amount * WorldClock.seconds_in_month;
          break;
        case 'years' || 'y':
          in_seconds = amount * WorldClock.seconds_in_year;
      }
      return in_seconds;
    };

    function WorldClock() {
      this.time_speedx = 1;
      this.since_epoch = 0;
      this.second = 0;
      this.minute = 0;
      this.hour = 0;
      this.day = 0;
      this.month = 0;
      this.year = 0;
      this.since_epoch = WorldClock.duration(Math.random() * 10, 'years');
      this.epoch_skewed = false;
      this.paused = false;
      this.timeout = null;
      this.timers = [];
      this.on_tick_fn = null;
    }

    WorldClock.prototype.tick = function(set_timeout) {
      var onetick,
        _this = this;
      if (set_timeout == null) {
        set_timeout = true;
      }
      this.update();
      if (set_timeout) {
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        onetick = 1000;
        if (this.time_speedx > 1) {
          onetick = 1000 * 1 / this.time_speedx;
        } else if (this.time_speedx < 1) {
          onetick = 1000 * (1 + this.time_speedx);
        }
        this.timeout = setTimeout(function() {
          return _this.tick();
        }, onetick);
        return typeof this.on_tick_fn === "function" ? this.on_tick_fn() : void 0;
      }
    };

    WorldClock.prototype.sync = function() {};

    WorldClock.prototype.update = function() {
      if (this.paused) {
        return;
      }
      this.since_epoch += 1;
      if (this.since_epoch < WorldClock.max_seconds) {
        this.second = this.since_epoch;
      } else {
        this.second = this.since_epoch % WorldClock.max_seconds;
      }
      this.minute = this.since_epoch / WorldClock.seconds_in_minute % WorldClock.max_minutes;
      this.hour = this.since_epoch / WorldClock.seconds_in_hour % WorldClock.max_hours;
      this.day = Math.floor(this.since_epoch / WorldClock.seconds_in_day % WorldClock.max_days);
      this.month = Math.floor(this.since_epoch / WorldClock.seconds_in_month % WorldClock.max_months);
      this.year = Math.floor(this.since_epoch / WorldClock.seconds_in_year);
      return this.update_timers();
    };

    WorldClock.prototype.update_timers = function() {
      var timer, _i, _len, _ref, _results;
      _ref = this.timers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        timer = _ref[_i];
        _results.push(timer.update());
      }
      return _results;
    };

    WorldClock.prototype.now = function() {
      return this.get_time();
    };

    WorldClock.prototype.day_in_year = function() {
      return this.month * WorldClock.max_days + this.day;
    };

    WorldClock.prototype.since_midnight = function() {
      return this.now() % WorldClock.seconds_in_day;
    };

    WorldClock.prototype.is_morning = function() {
      return this.since_midnight() < WorldClock.duration('3', 'hours');
    };

    WorldClock.prototype.is_night = function() {
      return this.since_midnight() > WorldClock.duration('7', 'hours');
    };

    WorldClock.prototype.is_afternoon = function() {
      return !this.is_morning() && !this.is_night();
    };

    WorldClock.prototype.is_am = function() {
      return this.since_midnight() < WorldClock.max_hours / 2;
    };

    WorldClock.prototype.is_pm = function() {
      return !this.is_am();
    };

    WorldClock.prototype.get_time = function(format) {
      if (format == null) {
        format = null;
      }
      if (!format) {
        return this.since_epoch;
      }
      format = format.replace('h', this.get_hours(true));
      format = format.replace('m', this.get_minutes(true));
      format = format.replace('s', this.get_seconds(true));
      format = format.replace('d', this.get_day());
      format = format.replace('y', this.get_year());
      format = format.replace('mo', this.get_month());
      return format;
    };

    WorldClock.prototype.get_hours = function(format) {
      var h;
      if (format == null) {
        format = false;
      }
      h = Math.floor(this.hour);
      if (format) {
        if (h < 10) {
          return '0' + h.toString();
        } else {
          return h.toString();
        }
      } else {
        return h;
      }
    };

    WorldClock.prototype.get_minutes = function(format) {
      var m;
      if (format == null) {
        format = false;
      }
      m = Math.floor(this.minute);
      if (format) {
        if (m < 10) {
          return '0' + m.toString();
        } else {
          return m.toString();
        }
      } else {
        return m;
      }
    };

    WorldClock.prototype.get_seconds = function(format) {
      var s;
      if (format == null) {
        format = false;
      }
      s = Math.floor(this.second);
      if (format) {
        if (s < 10) {
          return '0' + s.toString();
        } else {
          return s.toString();
        }
      } else {
        return this.second;
      }
    };

    WorldClock.prototype.get_day = function() {
      return Calendar.get_day(this.day);
    };

    WorldClock.prototype.get_year = function() {
      return this.year + 1;
    };

    WorldClock.prototype.get_month = function() {
      return Calendar.get_month(this.month);
    };

    WorldClock.prototype.create_timer = function(duration, on_complete) {
      var new_timer;
      if (duration == null) {
        duration = 0;
      }
      if (on_complete == null) {
        on_complete = null;
      }
      new_timer = new Timer(duration, on_complete);
      this.timers.push(new_timer);
      return new_timer;
    };

    WorldClock.prototype.set_time = function(new_epoch) {
      this.since_epoch = new_epoch;
      this.epoch_skewed = true;
      throw 'Time warp! *No matter what*.. do not erase past instances of yourself.';
    };

    WorldClock.prototype.add_time = function(amount, of_what) {
      if (amount == null) {
        amount = 1;
      }
      if (of_what == null) {
        of_what = "seconds";
      }
      this.epoch_skewed = true;
      return this.since_epoch += WorldClock.duration(amount, of_what);
    };

    WorldClock.prototype.subtract_time = function(amount, of_what) {
      if (amount == null) {
        amount = 1;
      }
      if (of_what == null) {
        of_what = "seconds";
      }
      this.epoch_skewed = true;
      return this.since_epoch -= WorldClock.duration(amount, of_what);
    };

    WorldClock.prototype.on_tick = function(fn) {
      return this.on_tick_fn = fn;
    };

    WorldClock.prototype.time_speed_plus = function() {
      return this.time_speedx = Math.min(4, this.time_speedx + .5);
    };

    WorldClock.prototype.time_speed_minus = function() {
      return this.time_speedx = Math.max(.5, this.time_speedx - .5);
    };

    WorldClock.prototype.time_speed_default = function() {
      return this.time_speedx = 1;
    };

    WorldClock.prototype.pause_time = function() {
      return this.paused = true;
    };

    WorldClock.prototype.resume_time = function() {
      return this.paused = false;
    };

    return WorldClock;

  })();

  World.WorldClock = WorldClock;

  /* --------------------------------------------
       Begin WeatherSystem.coffee
  --------------------------------------------
  */


  WeatherSystem = (function() {
    WeatherSystem.seasons = ['Spring', 'Summer', 'Fall', 'Winter'];

    WeatherSystem.months_in_season = 4;

    WeatherSystem.days_in_season = WeatherSystem.months_in_season * WorldClock.days_in_month;

    WeatherSystem.get_season = function(month) {
      return WeatherSystem.seasons[Math.floor(month / WeatherSystem.months_in_season) % Calendar.seasons.length];
    };

    function WeatherSystem() {
      this.state = new StateManager('sunny');
      this.season = 0;
      this.year_progress = 0;
      this.season_progress = 0;
      this.weather_system_started = 0;
      this.state = new StateManager('sunny');
      this.sun_state = new StateManager('set');
      this.clouds_state = new StateManager('clear');
      this.time_of_day_state = new StateManager('morning');
      this.sun_schedule = [];
      this.create_sun_schedule();
      this.temperature = 0;
      this.temperature_highs_lows = [];
    }

    WeatherSystem.prototype.create_sun_schedule = function() {
      var adjust, i, _i, _ref, _results;
      this.sun_schedule = [];
      _results = [];
      for (i = _i = 1, _ref = WorldClock.days_in_year; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        adjust = Math.sin(i / WorldClock.days_in_year) * .2;
        _results.push(this.sun_schedule.push({
          rise_time: (.2 + adjust) * WorldClock.seconds_in_day,
          set_time: (.8 - adjust) * WorldClock.seconds_in_day
        }));
      }
      return _results;
    };

    WeatherSystem.prototype.current_season = function() {
      return WeatherSystem.seasons[this.season];
    };

    WeatherSystem.prototype.sun_is_up = function() {
      return this.sun_state.current() === "up" || this.sun_state.current() === "rising";
    };

    WeatherSystem.prototype.update_sun = function(day, time_as_seconds) {
      var rise_time, schedule, set_time;
      schedule = this.sun_schedule[day];
      rise_time = WorldClock.duration('40', 'minutes');
      set_time = rise_time;
      switch (this.sun_state.current()) {
        case 'set':
          if (time_as_seconds < day.rise_time) {
            if (time_as_seconds + rise_time > day.rise_time) {
              this.sun_state.change_state('rising');
              return this.time_of_day_state.change_state('morning');
            }
          }
          break;
        case 'rising':
          if (time_as_seconds >= day.rise_time) {
            return this.sun_state.change_state('up');
          }
          break;
        case 'up':
          if (time_as_seconds + set_time > day.set_time) {
            return this.sun_state.change_state('setting');
          } else if (time_as_seconds > WorldClock.seconds_in_day * .42) {
            return this.time_of_day_state.change_state('afternoon');
          }
          break;
        case 'setting':
          if (time_as_seconds >= day.set_time) {
            this.sun_state.change_state('set');
            return this.time_of_day_state.change_state('night');
          }
      }
    };

    WeatherSystem.prototype.update = function(clock) {
      var day_index;
      day_index = clock.day_in_year();
      this.season = Math.floor(day_index / WeatherSystem.days_in_season);
      this.year_progress = day_index / WorldClock.days_in_year;
      this.season_progress = (day_index % WeatherSystem.days_in_season) / WeatherSystem.days_in_season;
      this.update_sun(day_index, clock.since_midnight());
      switch (this.current_season()) {
        case 'Spring':
          this.spring(clock);
          break;
        case 'Summer':
          this.summer(clock);
          break;
        case 'Fall':
          this.fall(clock);
          break;
        case 'Winter':
          this.winter(clock);
      }
      this.state.update();
      this.clouds_state.update();
      this.sun_state.update();
      return this.time_of_day_state.update();
    };

    WeatherSystem.prototype.begin_raining = function(duration, timenow) {
      var strength;
      if (duration == null) {
        duration = 0;
      }
      if (timenow == null) {
        timenow = 0;
      }
      strength = Math.random() + .4;
      this.weather_system_ends_at = strength * WeatherSystem.avg_spring_rain_duration;
      this.weather_system_started = timenow;
      return this.state.change_state('raining');
    };

    WeatherSystem.prototype.stop_raining = function() {
      this.weather_system_ends_at = null;
      this.weather_system_started = 0;
      return this.state.change_state('clear');
    };

    WeatherSystem.prototype.spring = function(clock) {
      var avg_rain_duration;
      avg_rain_duration = WorldClock.duration(3, 'hours');
      switch (this.state.current()) {
        case 'clear':
          if (Math.random() < WeatherSystem.spring_rain_chance) {
            return this.begin_raining(clock.now(), WeatherSystem.avg_spring_rain_duration);
          }
          break;
        case 'raining':
          if (clock.now() > this.weather_system_ends_at) {
            return this.stop_raining();
          }
          break;
        default:
          return this.state.change_state('clear');
      }
    };

    WeatherSystem.prototype.summer = function(clock) {
      if (this.state.current() !== 'clear') {
        return this.state.change_state('clear');
      }
    };

    WeatherSystem.prototype.fall = function(clock) {
      if (this.state.current() !== 'overcast') {
        return this.state.change_state('overcast');
      }
    };

    WeatherSystem.prototype.winter = function(clock) {
      if (this.state.current() !== 'clear') {
        return this.state.change_state('clear');
      }
    };

    return WeatherSystem;

  })();

  World.WeatherSystem = WeatherSystem;

  /* --------------------------------------------
       Begin RenderedObject.coffee
  --------------------------------------------
  */


  _next_id = 0;

  _auto_id = function() {
    return _next_id += 1;
  };

  RenderedObject = (function() {
    function RenderedObject(container, opts) {
      if (opts == null) {
        opts = {};
      }
      this.container = $(container);
      this.tmpl = this.set_template(this.template_id());
      this.rendered = false;
      this.view_data = {};
      this.set_opts(opts);
      this.state = new StateManager('idle');
      this.name = this.opts.name != null ? this.opts.name : '';
      this.id = this.opts.id != null ? this.opts.id : _auto_id();
      this.setup_events();
      if (this.opts.render) {
        this.render();
      }
    }

    RenderedObject.prototype.change_state = function(new_state) {
      return this.state.change_state(new_state);
    };

    RenderedObject.prototype.default_opts = function() {
      return {
        name: '',
        render: false
      };
    };

    RenderedObject.prototype.set_opts = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.opts = _.extend(this.default_opts(), opts);
    };

    RenderedObject.prototype.template_id = function() {
      return null;
    };

    RenderedObject.prototype.set_template = function(tmpl_id) {
      var new_tmpl;
      if (!tmpl_id) {
        return null;
      }
      new_tmpl = _.template($(tmpl_id).html());
      if (!new_tmpl) {
        return;
      }
      return this.tmpl = new_tmpl;
    };

    RenderedObject.prototype.get_view_data = function() {
      return {};
    };

    RenderedObject.prototype.set_view_data = function(key, val) {
      return this.view_data[key] = val;
    };

    RenderedObject.prototype.clear_view_data = function() {
      return this.view_data = [];
    };

    RenderedObject.prototype.setup_events = function() {
      var _this = this;
      return this.container.on('click', function(e) {
        return e.preventDefault();
      });
    };

    RenderedObject.prototype.render = function(force) {
      if (force == null) {
        force = false;
      }
      if ((this.rendered && !force) || !this.tmpl) {
        return;
      }
      this.container.empty();
      this.container.html(this.tmpl(_.extend(this.view_data, this.get_view_data())));
      return this.rendered = true;
    };

    return RenderedObject;

  })();

  /* --------------------------------------------
       Begin FloatingMenu.coffee
  --------------------------------------------
  */


  FloatingMenu = (function(_super) {
    __extends(FloatingMenu, _super);

    function FloatingMenu() {
      FloatingMenu.__super__.constructor.apply(this, arguments);
      if (!this.container.length) {
        this.container = $('<div/>').addClass('floating-menu');
        $('body').append(this.container.hide());
      }
      this.title = this.opts.title;
      this.items = this.opts.items;
      this.default_position = this.container.position();
      this.setup_events();
      if (this.opts.open) {
        this.open();
      }
    }

    FloatingMenu.prototype.default_opts = function() {
      return _.extend(FloatingMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Floating Menu',
        items: [],
        open: false
      });
    };

    FloatingMenu.prototype.template_id = function() {
      return '#floating-menu-template';
    };

    FloatingMenu.prototype.setup_events = function() {
      var _this = this;
      if (!this.container.length) {
        return;
      }
      return this.container.on('click', function(e) {
        var $el;
        e.preventDefault();
        $el = $(e.target);
        if ($el.is('[data-action=cancel]')) {
          _this.close();
          return _this.trigger('cancel');
        }
        if ($el.data('disabled')) {
          return;
        }
        return _this.trigger('item_selected', $el.data('action'));
      });
    };

    FloatingMenu.prototype.get_view_data = function() {
      return _.extend(FloatingMenu.__super__.get_view_data.apply(this, arguments), {
        title: this.title,
        items: this.items
      });
    };

    FloatingMenu.prototype.close = function() {
      return this.container.hide().trigger('close');
    };

    FloatingMenu.prototype.open = function() {
      this.render(true);
      return this.container.show().trigger('open');
    };

    FloatingMenu.prototype.destroy = function() {
      this.container.trigger('destroy').hide();
      return this.container.unbind().remove();
    };

    FloatingMenu.prototype.set_items = function(new_items) {
      this.items = new_items;
      this.set_view_data('items', this.items);
      this.render(true);
      return this.container.trigger('items_changed');
    };

    FloatingMenu.prototype.set_title = function(new_title) {
      this.title = new_title;
      this.set_view_data('title', this.title);
      this.render(true);
      return this.container.trigger('title_changed');
    };

    FloatingMenu.prototype.set_position = function(x, y) {
      return this.container.css({
        top: y,
        left: x
      });
    };

    FloatingMenu.prototype.best_position_for = function(x, y) {
      var right_edge, x_padding, y_padding;
      x_padding = 100;
      y_padding = -this.container.height() / 3;
      right_edge = x + this.container.width() + x_padding;
      if (right_edge > $(window).width()) {
        x = x - this.container.width() - x_padding;
      } else {
        x += x_padding;
      }
      if (y + y_padding < 0) {
        y = y_padding;
      } else if (y + y_padding > $(window).height()) {
        y = $(window).height() - this.container.height() - y_padding;
      } else {
        y += y_padding;
      }
      return this.set_position(x, y);
    };

    FloatingMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      return this.container.trigger(event_name, value);
    };

    return FloatingMenu;

  })(RenderedObject);

  World.FloatingMenu = FloatingMenu;

  /* --------------------------------------------
       Begin FloatingMenus.coffee
  --------------------------------------------
  */


  /* --------------------------------------------
       Begin BuildMenu.coffee
  --------------------------------------------
  */


  BuildMenu = (function(_super) {
    __extends(BuildMenu, _super);

    function BuildMenu() {
      BuildMenu.__super__.constructor.apply(this, arguments);
      this.block_id = this.opts.block_id;
      this.street_id = this.opts.street_id;
      this.town = this.opts.town;
    }

    BuildMenu.prototype.default_opts = function() {
      return _.extend(BuildMenu.__super__.default_opts.apply(this, arguments), {
        block_id: -1,
        street_id: -1,
        town: null,
        title: 'Build Menu',
        items: {
          build_farm: "Build Farm",
          build_factory: "Build Factory",
          build_housing: "Build Housing"
        }
      });
    };

    BuildMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      BuildMenu.__super__.trigger.apply(this, arguments);
      if (this.town && event_name === 'item_selected') {
        switch (value) {
          case 'build_farm':
            this.town.build_structure('farm', this.street_id, this.block_id);
            break;
          case 'build_factory':
            this.town.build_structure('factory', this.street_id, this.block_id);
            break;
          case 'build_housing':
            this.town.build_structure('housing', this.street_id, this.block_id);
        }
        return this.destroy();
      }
    };

    return BuildMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin FluxMenu.coffee
  --------------------------------------------
  */


  FluxMenu = (function(_super) {
    __extends(FluxMenu, _super);

    function FluxMenu() {
      FluxMenu.__super__.constructor.apply(this, arguments);
      this.clock = this.opts.clock;
      this.set_position(10, 10);
    }

    FluxMenu.prototype.default_opts = function() {
      return _.extend(FluxMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Flux Menu',
        clock: new WorldClock(),
        items: {
          pause_time: 'Pause Time',
          resume_time: 'Resume Time',
          speed_up_time: 'Speed up Time',
          slow_down_time: 'Slow Down Time',
          default_time: 'Reset Time Speed',
          add_one_hour: 'Add 1 Hour'
        }
      });
    };

    FluxMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === 'item_selected') {
        switch (value) {
          case 'pause_time':
            return this.pause_time();
          case 'resume_time':
            return this.resume_time();
          case 'speed_up_time':
            return this.speed_up_time();
          case 'slow_down_time':
            return this.slow_down_time();
          case 'default_time':
            return this.default_time();
          case 'add_one_hour':
            return this.add_one_hour();
        }
      }
    };

    FluxMenu.prototype.add_one_hour = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.add_time(1, 'hours') : void 0;
    };

    FluxMenu.prototype.pause_time = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.pause_time() : void 0;
    };

    FluxMenu.prototype.resume_time = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.resume_time() : void 0;
    };

    FluxMenu.prototype.speed_up_time = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.time_speed_plus() : void 0;
    };

    FluxMenu.prototype.slow_down_time = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.time_speed_minus() : void 0;
    };

    FluxMenu.prototype.default_time = function() {
      var _ref;
      return (_ref = this.clock) != null ? _ref.time_speed_default() : void 0;
    };

    return FluxMenu;

  })(FloatingMenu);

  World.FluxMenu = FluxMenu;

  /* --------------------------------------------
       Begin ResidentMenu.coffee
  --------------------------------------------
  */


  ResidentMenu = (function(_super) {
    __extends(ResidentMenu, _super);

    function ResidentMenu() {
      ResidentMenu.__super__.constructor.apply(this, arguments);
      this.resident = this.opts.resident;
      this.set_title(this.resident.name);
      this.available_jobs = this.opts.available_jobs;
      this.job_ids_to_index = {};
      this.view_data = this.get_view_data();
      this.render(true);
      this.jobs_menu = null;
      this.setup_jobs_menu();
    }

    ResidentMenu.prototype.destroy = function() {
      if (this.jobs_menu) {
        this.jobs_menu.destroy();
      }
      return ResidentMenu.__super__.destroy.apply(this, arguments);
    };

    ResidentMenu.prototype.default_opts = function() {
      return _.extend(ResidentMenu.__super__.default_opts.apply(this, arguments), {
        resident: null,
        items: {
          show_stats: 'Show Stats',
          assign_job: 'Assign Job',
          evict: 'Evict'
        },
        available_jobs: []
      });
    };

    ResidentMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === "item_selected") {
        switch (value) {
          case 'show_stats':
            return this.show_stats();
          case 'assign_job':
            return this.assign_job();
          case 'evict':
            return this.evict();
        }
      }
    };

    ResidentMenu.prototype.setup_jobs_menu = function() {
      var i, job, job_items, _i, _len, _ref,
        _this = this;
      job_items = {};
      _ref = this.available_jobs;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        job = _ref[i];
        job_items[job.id] = job.name;
        this.job_ids_to_index[job.id] = i;
      }
      this.jobs_menu = new SelectJobMenu(null, {
        items: job_items
      });
      return this.jobs_menu.container.on('item_selected', function(e, value) {
        var job_id;
        job_id = parseInt(value);
        if (_.has(_this.job_ids_to_index, job_id)) {
          job = _this.available_jobs[_this.job_ids_to_index[job_id]];
          job.employ_resident(_this.resident);
        }
        return _this.destroy();
      });
    };

    ResidentMenu.prototype.show_stats = function() {};

    ResidentMenu.prototype.assign_job = function() {
      return this.jobs_menu.open();
    };

    ResidentMenu.prototype.evict = function() {};

    return ResidentMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin SelectCropMenu.coffee
  --------------------------------------------
  */


  SelectCropMenu = (function(_super) {
    __extends(SelectCropMenu, _super);

    function SelectCropMenu() {
      SelectCropMenu.__super__.constructor.apply(this, arguments);
      this.crops = this.opts.crops;
      this.view_data = this.get_view_data();
      this.render(true);
    }

    SelectCropMenu.prototype.default_opts = function() {
      return _.extend(SelectCropMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Select Crop',
        items: []
      });
    };

    SelectCropMenu.prototype.trigger = function() {
      SelectCropMenu.__super__.trigger.apply(this, arguments);
      return this.destroy();
    };

    return SelectCropMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin SelectHouseMenu.coffee
  --------------------------------------------
  */


  SelectHouseMenu = (function(_super) {
    __extends(SelectHouseMenu, _super);

    function SelectHouseMenu() {
      SelectHouseMenu.__super__.constructor.apply(this, arguments);
      this.housing = this.opts.housing;
      this.setup_items();
    }

    SelectHouseMenu.prototype.setup_items = function() {
      var house, _i, _len, _ref;
      if (!this.housing) {
        return;
      }
      this.items = {};
      _ref = this.housing;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        house = _ref[_i];
        this.items["house_" + house.id] = house.name;
      }
      return this.render(true);
    };

    SelectHouseMenu.prototype.default_opts = function() {
      return _.extend(SelectHouseMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Select Home',
        housing: []
      });
    };

    SelectHouseMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (value == null) {
        value = null;
      }
      SelectHouseMenu.__super__.trigger.apply(this, arguments);
      if (event_name === 'item_selected') {
        this.trigger('house_selected', value);
      }
      return this.destroy();
    };

    return SelectHouseMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin VisitorMenu.coffee
  --------------------------------------------
  */


  VisitorMenu = (function(_super) {
    __extends(VisitorMenu, _super);

    function VisitorMenu() {
      VisitorMenu.__super__.constructor.apply(this, arguments);
      this.visitor = this.opts.visitor;
      this.town = this.opts.town;
      this.housing = this.town.get_housing();
      this.setup_house_menu();
    }

    VisitorMenu.prototype.default_opts = function() {
      return _.extend(VisitorMenu.__super__.default_opts.apply(this, arguments), {
        visitor: null,
        town: null,
        title: 'Visitor Actions',
        items: {
          move_in: "Move In",
          kick_out: "Kick Out"
        }
      });
    };

    VisitorMenu.prototype.setup_house_menu = function() {
      return this.select_house_menu = new SelectHouseMenu(null, {
        housing: this.housing
      });
    };

    VisitorMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (value == null) {
        value = null;
      }
      VisitorMenu.__super__.trigger.apply(this, arguments);
      if (event_name === 'item_selected') {
        switch (value) {
          case 'move_in':
            this.move_in_to_town();
            break;
          case 'kick_out':
            this.kick_out_of_town();
        }
      }
      return this.destroy();
    };

    VisitorMenu.prototype.move_in_to_town = function() {
      var _this = this;
      if (!(this.town && this.visitor)) {
        return;
      }
      this.select_house_menu.open();
      return this.select_house_menu.container.one('house_selected', function(e, house_id) {
        var house, _i, _len, _ref, _results;
        house_id = parseInt(house_id.replace("house_", ""));
        _ref = _this.housing;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          house = _ref[_i];
          if (house.id === house_id) {
            _this.town.convert_visitor_to_resident(_this.visitor.id);
            _results.push(house.move_resident_in(_this.visitor));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    VisitorMenu.prototype.kick_out_of_town = function() {
      if (!(this.town && this.visitor)) {
        return;
      }
      return this.town.remove_visitor(this.visitor.id);
    };

    return VisitorMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin SelectJobMenu.coffee
  --------------------------------------------
  */


  SelectJobMenu = (function(_super) {
    __extends(SelectJobMenu, _super);

    function SelectJobMenu() {
      SelectJobMenu.__super__.constructor.apply(this, arguments);
      this.resident = this.opts.resident;
      this.jobs = this.opts.jobs;
    }

    SelectJobMenu.prototype.default_opts = function() {
      return _.extend(SelectJobMenu.__super__.default_opts.apply(this, arguments), {
        name: 'Select Job',
        jobs: null,
        resident: null
      });
    };

    return SelectJobMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin HireWorkersMenu.coffee
  --------------------------------------------
  */


  HireWorkersMenu = (function(_super) {
    __extends(HireWorkersMenu, _super);

    function HireWorkersMenu() {
      HireWorkersMenu.__super__.constructor.apply(this, arguments);
      this.workers = this.opts.workers;
      this.job = this.opts.job;
      this.setup_items();
    }

    HireWorkersMenu.prototype.setup_items = function() {
      var items, w, _i, _len, _ref;
      items = {};
      _ref = this.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        items[w.id] = w.name;
      }
      return this.set_items(items);
    };

    HireWorkersMenu.prototype.default_opts = function() {
      return _.extend(HireWorkersMenu.__super__.default_opts.apply(this, arguments), {
        title: "Hire Workers",
        workers: [],
        job: null
      });
    };

    HireWorkersMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      console.log(value);
      if (event_name === 'item_selected') {
        return this.assign_worker_to_job(parseInt(value));
      }
    };

    HireWorkersMenu.prototype.assign_worker_to_job = function(worker_id) {
      var w, worker, _i, _len, _ref;
      if (!this.job) {
        return;
      }
      worker = null;
      _ref = this.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        if (w.id = worker_id) {
          worker = w;
        }
      }
      console.log(worker, this.job);
      if (!worker) {
        return;
      }
      this.job.employ_resident(worker);
      return this.destroy();
    };

    return HireWorkersMenu;

  })(FloatingMenu);

  /* --------------------------------------------
       Begin Alert.coffee
  --------------------------------------------
  */


  Alert = (function() {
    function Alert(message, type) {
      this.message = message != null ? message : '';
      this.type = type != null ? type : 'status';
      this.tmpl = _.template($('#alert-template').html());
      this.dismissed = false;
      this.render();
      this.setup_events();
      this;
    }

    Alert.prototype.delayed_dismiss = function(millis) {
      var _this = this;
      if (millis == null) {
        millis = 3000;
      }
      return setTimeout(function() {
        return _this.dismiss();
      }, millis);
    };

    Alert.prototype.setup_events = function() {
      var _this = this;
      return this.container.on('click', function(e) {
        var $el;
        e.preventDefault();
        $el = $(e.target);
        switch ($el.data('action')) {
          case 'dismiss':
            return _this.dismiss();
        }
      });
    };

    Alert.prototype.dismiss = function() {
      if (this.dismissed) {
        return;
      }
      this.dismissed = true;
      return this.container.fadeOut(function() {
        return $(this).remove();
      });
    };

    Alert.prototype.show = function() {
      return this.container.fadeIn();
    };

    Alert.prototype.render = function() {
      var $alert, data;
      data = {
        message: this.message,
        type: this.type
      };
      $alert = $(this.tmpl(data));
      this.container = $alert;
      $('body').append(this.container);
      return this.show();
    };

    return Alert;

  })();

  World.Alert = Alert;

  ErrorAlert = (function(_super) {
    __extends(ErrorAlert, _super);

    function ErrorAlert(message, type) {
      var _this = this;
      this.message = message != null ? message : '';
      this.type = type != null ? type : 'error';
      ErrorAlert.__super__.constructor.call(this, this.message, this.type);
      setTimeout(function() {
        return _this.dismiss();
      }, 1000 * 30);
    }

    return ErrorAlert;

  })(Alert);

  World.Alert.Error = ErrorAlert;

  FundsNotAvailableAlert = (function(_super) {
    __extends(FundsNotAvailableAlert, _super);

    function FundsNotAvailableAlert(message) {
      this.message = message != null ? message : 'Funds not available';
      FundsNotAvailableAlert.__super__.constructor.call(this, this.message);
    }

    return FundsNotAvailableAlert;

  })(ErrorAlert);

  /* --------------------------------------------
       Begin HUD.coffee
  --------------------------------------------
  */


  HUD = (function(_super) {
    __extends(HUD, _super);

    function HUD() {
      _ref = HUD.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HUD.prototype.template_id = function() {
      return '#hud-template';
    };

    HUD.prototype.update = function(view_data) {
      this.view_data = view_data != null ? view_data : {};
    };

    HUD.prototype.setup_events = function() {
      var _this = this;
      return this.container.on('click', function(e) {
        var $el;
        e.preventDefault();
        $el = $(e.target);
        if ($el.is('.btn')) {
          return _this.container.trigger('btn_pressed', $el.data('action'));
        }
      });
    };

    HUD.prototype.render = function() {
      var $speedx, fill_values, key, val, _results;
      HUD.__super__.render.apply(this, arguments);
      fill_values = {
        calendar_month: this.view_data.clock.get_month(),
        calendar_year: this.view_data.clock.get_year(),
        clock_time: this.view_data.clock.get_time('h:m:s'),
        time_speedx: this.view_data.clock.time_speedx,
        balance: this.view_data.town.balance,
        occupancy_percent: Math.round(this.view_data.town.occupancy_percent * 100),
        weather_season: this.view_data.weather.current_season(),
        weather_conditions: this.view_data.weather.state.current(),
        sun_is_up: this.view_data.clock.is_afternoon() ? "up" : "down"
      };
      _results = [];
      for (key in fill_values) {
        val = fill_values[key];
        this.container.find("[data-fill=" + key + "]").text(val);
        $speedx = this.container.find("[data-fill=time_speedx]");
        if (fill_values.time_speedx === 1) {
          _results.push($speedx.hide());
        } else {
          _results.push($speedx.show().text("(" + fill_values.time_speedx + "x)"));
        }
      }
      return _results;
    };

    return HUD;

  })(RenderedObject);

  /* --------------------------------------------
       Begin StateManager.coffee
  --------------------------------------------
  */


  StateManager = (function() {
    function StateManager(state, duration, queue_state) {
      if (state == null) {
        state = '';
      }
      if (duration == null) {
        duration = 0;
      }
      if (queue_state == null) {
        queue_state = '';
      }
      this.default_state = state;
      this.current_state = state;
      this.next_state = '';
      this.previous_state = '';
      this.state_changed_at = 0;
      this.time_since_change = 0;
      this.duration = duration;
      this.ticks = 0;
      this.queued_state = queue_state;
      this.bindings = {};
      this.history = [];
    }

    StateManager.prototype.time_since_state_change = function() {
      return this.time_since_change;
    };

    StateManager.prototype.current = function() {
      return this.current_state;
    };

    StateManager.prototype.on = function(event_name, fn, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      if (!_.has(this.bindings, event_name) || overwrite) {
        this.bindings[event_name] = [];
      }
      return this.bindings[event_name].push(fn);
    };

    StateManager.prototype.queue_state = function(state, change_in) {
      if (state == null) {
        state = '';
      }
      if (change_in == null) {
        change_in = 0;
      }
      this.queued_state = state;
      if (change_in > 0) {
        this.duration = change_in;
        return this.ticks = 0;
      }
    };

    StateManager.prototype.change_state = function(new_state, duration, queue_state) {
      if (new_state == null) {
        new_state = '';
      }
      if (duration == null) {
        duration = 0;
      }
      if (queue_state == null) {
        queue_state = '';
      }
      if (new_state === this.current_state) {
        return;
      }
      this.next_state = new_state;
      this.record_history('next');
      if (duration > 0) {
        return this.queue_state(queue_state, duration);
      }
    };

    StateManager.prototype.trigger = function(event_name, data) {
      var fn, _i, _len, _ref1, _results;
      if (data == null) {
        data = null;
      }
      if (!_.has(this.bindings, event_name)) {
        return;
      }
      _ref1 = this.bindings[event_name];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        fn = _ref1[_i];
        _results.push(fn.apply(this, data != null));
      }
      return _results;
    };

    StateManager.prototype.record_history = function(type) {
      if (type == null) {
        type = 'changed';
      }
      switch (type) {
        case 'changed':
          return this.history.push({
            the_time: (new Date()).getTime(),
            current_state: this.current_state,
            previous_state: this.previous_state
          });
        case 'next':
          return this.history.push({
            the_time: (new Date()).getTime(),
            current_state: this.current_state,
            next_state: this.next_state
          });
      }
    };

    StateManager.prototype.update = function(clock) {
      if (clock == null) {
        clock = null;
      }
      this.ticks += 1;
      if (clock) {
        this.time_since_change = clock.now() - this.state_changed_at;
      }
      if (this.duration && this.ticks > this.duration && !_.isEmpty(this.queued_state)) {
        this.change_state(this.queued_state);
        this.queued_state = '';
        this.duration = 0;
      }
      if (_.isEmpty(this.next_state)) {
        return;
      }
      this.previous_state = this.current_state;
      this.current_state = this.next_state;
      this.next_state = '';
      if (clock) {
        this.state_changed_at = clock.now();
      }
      this.trigger('state_changed', [this.current_state, this.previous_state]);
      return this.record_history('changed');
    };

    return StateManager;

  })();

  /* --------------------------------------------
       Begin Town.coffee
  --------------------------------------------
  */


  Town = (function(_super) {
    __extends(Town, _super);

    Town.costs = {
      street: 100
    };

    Town.extra_visitors = true;

    Town.visitor_chance = Town.extra_visitors ? .15 : .05;

    Town.visitors_all_day = true;

    Town.prototype.default_opts = function() {
      return _.extend(Town.__super__.default_opts.apply(this, arguments), {
        balance: 0
      });
    };

    function Town() {
      Town.__super__.constructor.apply(this, arguments);
      this.street_tmpl = _.template($('#street-template').html());
      this.location = [0, 0];
      this.time = 0;
      this.day = 0;
      this.year = 0;
      this.balance = this.opts.balance;
      this.spent = 0;
      this.occupancy_percent = 0;
      this.next_street_id = 0;
      this.next_resident_id = 0;
      this.streets = [];
      this.street_ids_to_index = {};
      this.residents = [];
      this.resident_ids_to_index = {};
      this.visitors = [];
      this.selected_visitor = 0;
      this.blocks = [];
      this.block_ids_to_index = {};
      this.structures = [];
      this.structure_ids_to_index = {};
      this.structures_by_type = {};
    }

    Town.prototype.template_id = function() {
      return '#town-template';
    };

    Town.prototype.render = function() {
      Town.__super__.render.apply(this, arguments);
      this.render_streets();
      return this.render_visitors();
    };

    Town.prototype.update = function(clock) {
      var r, s, _i, _j, _len, _len1, _ref1, _ref2;
      _ref1 = this.streets;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        s.update(clock);
      }
      _ref2 = this.residents;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        r = _ref2[_j];
        r.update(clock);
      }
      this.get_occupancy_percent();
      if (this.visitors.length < 12 && this.occupancy_percent < .8 && (Town.visitors_all_day || clock.is_afternoon())) {
        if (Math.random() < Town.visitor_chance) {
          return this.create_visitor();
        }
      }
    };

    Town.prototype._street_id = function() {
      return this.next_street_id += 1;
    };

    Town.prototype._street_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._street_id(),
        name: 'One Street'
      }, props);
    };

    Town.prototype.create_street = function(props) {
      var $new_street, new_street;
      if (props == null) {
        props = {};
      }
      if (!this.funds_available(Town.costs.street)) {
        new FundsNotAvailableAlert();
        throw 'Funds not available';
        return false;
      }
      this.spend_funds(Town.costs.street);
      props = this._street_props(props);
      $new_street = $(this.street_tmpl({
        id: props.id
      }));
      this.container.find('.streets').append($new_street);
      new_street = new Street(this.container.find(".street[data-id=" + props.id + "]"), props);
      this.streets.push(new_street);
      return this.street_ids_to_index[new_street.id] = this.streets.length - 1;
    };

    Town.prototype.create_block = function(street_id, props) {
      var new_block, street, street_idx;
      if (props == null) {
        props = {};
      }
      street_idx = this.street_ids_to_index[street_id];
      street = this.streets[street_idx];
      if (!street) {
        return;
      }
      if (!this.funds_available(Block.costs.excavation)) {
        new FundsNotAvailableAlert();
        throw 'Funds not available';
      }
      this.spend_funds(Block.costs.excavation);
      new_block = street.create_block(props);
      this.blocks.push(new_block);
      return this.block_ids_to_index[new_block.id] = this.blocks.length - 1;
    };

    Town.prototype._resident_id = function() {
      return this.next_resident_id += 1;
    };

    Town.prototype._resident_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._resident_id(),
        name: 'Mr Resident'
      }, props);
    };

    Town.prototype.get_visitor = function(id, is_id) {
      var v, _i, _len, _ref1;
      if (id == null) {
        id = 0;
      }
      if (is_id == null) {
        is_id = false;
      }
      if (is_id) {
        _ref1 = this.visitors;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          v = _ref1[_i];
          if (v.id === id) {
            return v;
          }
        }
      } else {
        if (_.has(this.visitors, id)) {
          return this.visitors[id];
        } else {
          return false;
        }
      }
    };

    Town.prototype.create_visitor = function(props) {
      var new_resident;
      if (props == null) {
        props = {};
      }
      props = this._resident_props(props);
      new_resident = new Resident(null, props);
      this.visitors.push(new_resident);
      return new_resident;
    };

    Town.prototype.remove_visitor = function(id) {
      var v, visitors_cleaned, _i, _len, _ref1;
      visitors_cleaned = [];
      _ref1 = this.visitors;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.id !== id) {
          visitors_cleaned.push(v);
        }
      }
      return this.visitors = visitors_cleaned;
    };

    Town.prototype.convert_visitor_to_resident = function(visitor_id) {
      var visitor;
      visitor = this.get_visitor(visitor_id, true);
      if (!visitor) {
        return;
      }
      this.residents.push(visitor);
      this.resident_ids_to_index[visitor.id] = this.residents.length - 1;
      return this.remove_visitor(visitor_id);
    };

    Town.prototype.get_resident = function(id) {
      if (!_.has(this.resident_ids_to_index, id)) {
        throw 'resident ID not found';
        return false;
      }
      return this.residents[this.resident_ids_to_index[id]];
    };

    Town.prototype.render_streets = function() {
      var s, _i, _len, _ref1, _results;
      _ref1 = this.streets;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        _results.push(s.render());
      }
      return _results;
    };

    Town.prototype.render_visitors = function() {
      var $visitors, visitors_tmpl;
      $visitors = this.container.find('.visitors');
      if (!this.visitors.length) {
        $visitors.hide();
        return;
      } else if (!$visitors.is(':visible')) {
        $visitors.show();
      }
      visitors_tmpl = _.template($('#visitors-template').html());
      $visitors.empty();
      return $visitors.html(visitors_tmpl({
        visitors: this.visitors,
        selected_visitor: this.selected_visitor
      }));
    };

    Town.prototype.add_funds = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      return this.balance += how_much;
    };

    Town.prototype.spend_funds = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      this.spent += how_much;
      return this.balance -= how_much;
    };

    Town.prototype.funds_available = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      return (this.balance - how_much) >= 0;
    };

    Town.prototype.get_occupancy_percent = function() {
      var idx, structure_ids, total, _i, _len, _ref1;
      if (!_.has(this.structures_by_type, 'housing')) {
        return;
      }
      structure_ids = this.structures_by_type['housing'];
      total = 0;
      for (_i = 0, _len = structure_ids.length; _i < _len; _i++) {
        idx = structure_ids[_i];
        total += (_ref1 = this.structures[idx]) != null ? _ref1.occupancy_percent() : void 0;
      }
      return this.occupancy_percent = total / structure_ids.length;
    };

    Town.prototype.build_structure = function(type, street_id, block_id) {
      var new_structure;
      if (!_.has(Block.costs, type)) {
        throw 'Bad type';
      }
      if (!this.funds_available(Block.costs[type])) {
        new FundsNotAvailableAlert();
        throw 'Funds not available';
      }
      this.spend_funds(Block.costs[type]);
      street_id = this.street_ids_to_index[street_id];
      if (!_.has(this.streets, street_id)) {
        return;
      }
      new_structure = this.streets[street_id].build_structure(type, block_id);
      if (!new_structure) {
        throw 'Error creating structure';
      }
      this.structures.push(new_structure);
      this.structure_ids_to_index[new_structure.id] = this.structures.length - 1;
      if (!_.has(this.structures_by_type, type)) {
        this.structures_by_type[type] = [];
      }
      this.structures_by_type[type].push(this.structures.length - 1);
      return new_structure;
    };

    Town.prototype.setup_events = function() {
      var _this = this;
      return this.container.on('click', function(e) {
        var $el, build_menu, hire_workers_menu, resident, resident_menu, structure, structure_id, visitor_menu;
        e.preventDefault();
        $el = $(e.target);
        switch ($el.data('action')) {
          case 'build_structure':
            return _this.build_structure($el.data('value'), $el.closest('.street').data('id'), $el.closest('.block').data('id'));
          case 'add_block':
            return _this.create_block($el.closest('.street').data('id'));
          case 'launch_build_menu':
            build_menu = new BuildMenu(null, {
              block_id: $el.closest('.block').data('id'),
              street_id: $el.closest('.street').data('id'),
              town: _this,
              open: true
            });
            build_menu.best_position_for(e.clientX, e.clientY);
            return build_menu.container.one('item_selected', function(e, selection) {
              return $el.hide();
            });
          case 'launch_visitor_menu':
            $el.addClass('active');
            _this.selected_visitor = $el.data('index');
            visitor_menu = new VisitorMenu(null, {
              town: _this,
              visitor: _this.get_visitor($el.data('index'), false),
              open: true
            });
            visitor_menu.best_position_for(e.clientX, e.clientY);
            return visitor_menu.container.one('destroy', function() {
              return _this.selected_visitor = null;
            });
          case 'launch_resident_menu':
            resident = _this.get_resident($el.data('id'));
            return resident_menu = new ResidentMenu(null, {
              resident: resident,
              available_jobs: _this.get_available_jobs(),
              open: true
            });
          case 'launch_hire_workers_menu':
            structure_id = $el.data('structure-id');
            if (_.has(_this.structure_ids_to_index, structure_id)) {
              structure = _this.structures[_this.structure_ids_to_index[structure_id]];
              return hire_workers_menu = new HireWorkersMenu(null, {
                job: structure,
                workers: _this.get_available_workers(),
                open: true
              });
            }
        }
      });
    };

    Town.prototype.get_housing = function(only_vacant) {
      var h, housing, results, s, _i, _len;
      if (only_vacant == null) {
        only_vacant = false;
      }
      if (!_.has(this.structures_by_type, 'housing')) {
        return;
      }
      housing = this.structures_by_type['housing'];
      results = [];
      for (_i = 0, _len = housing.length; _i < _len; _i++) {
        h = housing[_i];
        s = this.structures[h];
        if (!only_vacant || s.has_vacancy()) {
          results.push(s);
        }
      }
      return results;
    };

    Town.prototype.get_available_jobs = function() {
      var jobs, s, _i, _len, _ref1;
      jobs = [];
      _ref1 = this.structures;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        if (s.has_jobs_available()) {
          jobs.push(s);
        }
      }
      return jobs;
    };

    Town.prototype.get_available_workers = function() {
      var r, workers, _i, _len, _ref1;
      workers = [];
      _ref1 = this.residents;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        r = _ref1[_i];
        if (!r.is_employed()) {
          workers.push(r);
        }
      }
      return workers;
    };

    return Town;

  })(RenderedObject);

  /* --------------------------------------------
       Begin Street.coffee
  --------------------------------------------
  */


  Street = (function(_super) {
    __extends(Street, _super);

    function Street() {
      Street.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('setup');
      this.block_tmpl = _.template($('#block-template').html());
      this.name = '';
      this.num_blocks = 0;
      this.max_blocks = 6;
      this.next_block_id = 0;
      this.blocks = [];
      this.block_ids_to_index = {};
      this.structures = [];
      this.structure_ids_to_index = {};
    }

    Street.prototype.setup_blocks = function() {
      var i, _i, _ref1;
      for (i = _i = 1, _ref1 = this.opts.blocks; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        this.create_block();
      }
      return this.num_blocks = this.blocks.length;
    };

    Street.prototype.render = function() {
      var b, _i, _len, _ref1, _results;
      Street.__super__.render.apply(this, arguments);
      _ref1 = this.blocks;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        b = _ref1[_i];
        _results.push(b.render());
      }
      return _results;
    };

    Street.prototype.update = function(clock) {
      var b, _i, _len, _ref1;
      switch (this.state.current()) {
        case 'setup':
          this.setup_blocks();
          this.state.change_state('running');
          break;
        case 'running':
          _ref1 = this.blocks;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            b = _ref1[_i];
            b.update(clock);
          }
      }
      return this.state.update();
    };

    Street.prototype._block_id = function() {
      return this.next_block_id += 1;
    };

    Street.prototype._block_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._block_id()
      }, props);
    };

    Street.prototype.create_block = function(props) {
      var $new_block, new_block;
      if (props == null) {
        props = {};
      }
      if (!(this.num_blocks < this.max_blocks)) {
        return;
      }
      props = this._block_props(props);
      $new_block = this.block_tmpl({
        id: props.id
      });
      this.container.find('.blocks').append($new_block);
      new_block = new Block(this.container.find(".block[data-id=" + props.id + "]"), props);
      this.blocks.push(new_block);
      this.block_ids_to_index[new_block.id] = this.blocks.length - 1;
      return this.num_blocks = this.blocks.length;
    };

    Street.prototype.build_structure = function(type, build_id) {
      var block_idx, new_structure;
      if (!_.has(this.block_ids_to_index, build_id)) {
        throw 'Bad block id';
      }
      block_idx = this.block_ids_to_index[build_id];
      new_structure = this.blocks[block_idx].build_structure(type);
      this.structures.push(new_structure);
      this.structure_ids_to_index[new_structure.id] = this.structures.length - 1;
      return new_structure;
    };

    Street.prototype.setup_events = function() {};

    return Street;

  })(RenderedObject);

  /* --------------------------------------------
       Begin Block.coffee
  --------------------------------------------
  */


  Block = (function(_super) {
    __extends(Block, _super);

    Block.costs = {
      excavation: 50,
      housing: 4,
      farm: 5,
      factory: 5
    };

    function Block() {
      Block.__super__.constructor.apply(this, arguments);
      this.type = '';
      this.structure = null;
      this.update();
    }

    Block.prototype.update = function(clock) {
      if (this.structure) {
        this.structure.update(clock);
      }
      return this.set_view_data('block', {
        type: this.type,
        structure: this.structure
      });
    };

    Block.prototype.render = function() {
      Block.__super__.render.apply(this, arguments);
      if (this.structure) {
        return this.structure.render();
      }
    };

    Block.prototype.build_structure = function(type) {
      switch (type) {
        case 'housing':
          this.build_housing();
          break;
        case 'farm':
          this.build_farm();
          break;
        case 'factory':
          this.build_factory();
      }
      this.container.find('.build_actions').remove();
      this.container.find('.structure').show();
      return this.structure;
    };

    Block.prototype.build_housing = function() {
      return this.structure = new Housing(this.container.find('.structure'));
    };

    Block.prototype.build_farm = function() {
      return this.structure = new Farm(this.container.find('.structure'));
    };

    Block.prototype.build_factory = function() {
      return this.structure = new Factory(this.container.find('.structure'));
    };

    Block.prototype.setup_events = function() {};

    return Block;

  })(RenderedObject);

  World.Block = Block;

  /* --------------------------------------------
       Begin Resident.coffee
  --------------------------------------------
  */


  Resident = (function(_super) {
    __extends(Resident, _super);

    Resident.male_names = ['Sonny', 'Art', 'Brett', 'Perry', 'Humberto', 'Carmine', 'Bernard', 'Myles', 'Frances', 'Octavio', 'Edmundo', 'Alan', 'Leland', 'Derek', 'Jamaal', 'Cecil', 'Kenton', 'Elwood', 'Buford', 'Mac'];

    Resident.female_names = ['Celinda', 'Robena', 'Bonita', 'Katy', 'Esmeralda', 'Danae', 'Rena', 'Amberly', 'Tillie', 'Emily', 'Margareta', 'Shenita', 'Lavon', 'Willene', 'Felisha', 'Joaquina', 'Regine', 'Sheena', 'Denice', 'Rona'];

    Resident.gender_weight_male = .65;

    Resident.random_name = function(gender) {
      var name;
      if (gender == null) {
        gender = 'male';
      }
      name = gender === 'male' ? this.male_names[Math.floor(Math.random() * Resident.male_names.length)] : this.female_names[Math.floor(Math.random() * Resident.female_names.length)];
      return name;
    };

    function Resident() {
      var _ref1;
      Resident.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('idle');
      this.house = this.opts.house;
      this.house_id = (_ref1 = this.house) != null ? _ref1.id : void 0;
      this.employer = this.opts.employer;
      this.setup_stats();
    }

    Resident.prototype.setup_stats = function() {
      this.gender = Math.random() > Resident.gender_weight_male ? 'female' : 'male';
      this.name = Resident.random_name(this.gender);
      this.sleep_schedule = {
        goto_bed: WorldClock.duration('9', 'hours'),
        wake_up: WorldClock.duration('2', 'hours')
      };
      return this.work_schedule = {
        goto_work: WorldClock.duration('4', 'hours'),
        leave_work: WorldClock.duration('7', 'hours')
      };
    };

    Resident.prototype.default_opts = function() {
      return _.extend(Resident.__super__.default_opts.apply(this, arguments), {
        house: null,
        employer: null
      });
    };

    Resident.prototype.update = function(clock) {
      this.state.update();
      switch (this.state.current()) {
        case 'goto_bed':
          return this.change_state('sleeping');
        case 'sleeping':
          return this.sleep(clock);
        case 'wake_up':
          return this.change_state('idle');
        case 'goto_work':
          return this.change_state('working');
        case 'working':
          return this.work(clock);
        case 'idle':
          return this.idle(clock);
      }
    };

    Resident.prototype.render = function() {};

    Resident.prototype.sleep = function(clock) {
      var now;
      now = clock.since_midnight();
      if (now > this.sleep_schedule.wake_up && clock.is_morning()) {
        return this.change_state('wake_up');
      }
    };

    Resident.prototype.work = function(clock) {
      var now;
      now = clock.since_midnight();
      if (!this.is_employed() || now > this.work_schedule.leave_work) {
        return this.change_state('idle');
      }
    };

    Resident.prototype.idle = function(clock) {
      var now;
      now = clock.since_midnight();
      if (now > this.sleep_schedule.goto_bed || now < this.sleep_schedule.wake_up) {
        return this.change_state('goto_bed');
      } else if (this.employer && now > this.work_schedule.goto_work) {
        return this.change_state('goto_work');
      }
    };

    Resident.prototype.is_employed = function() {
      return this.employer !== null;
    };

    Resident.prototype.set_employer = function(employer) {
      return this.employer = employer;
    };

    return Resident;

  })(RenderedObject);

  World.Resident = Resident;

  /* --------------------------------------------
       Begin Structure.coffee
  --------------------------------------------
  */


  Structure = (function(_super) {
    __extends(Structure, _super);

    function Structure() {
      Structure.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('idle');
      this.state_timer = new Timer();
      this.type = '';
      this.cost = 1;
      this.construction_time = this.opts.construction_time;
      this.construction_time_remaining = 0;
      this.construction_started = null;
      this.built = false;
      this.employees = this.opts.employees;
      this.max_employees = this.opts.max_employees;
      this.min_employees_to_operate = this.opts.min_employees_to_operate;
      this.operating_cost = this.opts.operating_cost;
      this.lifetime_operating_cost = 0;
      this.construction_tmpl = _.template($('#structure-under-construction-template').html());
      this.needs_workers_tmpl = _.template($('#structure-needs-workers-template').html());
      if (this.opts.begin_construction) {
        this.change_state('begin_construction');
      }
    }

    Structure.prototype.default_opts = function() {
      return _.extend(Structure.__super__.default_opts.apply(this, arguments), {
        name: 'Structure',
        begin_construction: true,
        construction_time: WorldClock.duration(1, 'minutes'),
        employees: [],
        max_employees: 5,
        min_employees_to_operate: 1,
        operating_cost: 10
      });
    };

    Structure.prototype.update = function(clock) {
      this.state.update(clock);
      switch (this.state.current()) {
        case 'begin_construction':
          return this.begin_construction(clock);
        case 'under_construction':
          return this.progress_construction(clock);
        case 'needs_workers':
          return this.needs_workers();
        default:
          if (this.min_employees_to_operate > 0 && this.employees.length < this.min_employees_to_operate) {
            return this.state.change_state('needs_workers');
          }
          return this.operating(clock);
      }
    };

    Structure.prototype.progress_construction = function(clock) {
      this.state_timer.update();
      this.construction_time_remaining = this.state_timer.remaining;
      if (this.state_timer.is_complete()) {
        return this.finish_construction();
      }
    };

    Structure.prototype.is_under_construction = function() {
      return this.state.current() === 'under_construction' || this.state.current() === "begin_construction";
    };

    Structure.prototype.begin_construction = function(clock) {
      this.change_state('under_construction');
      this.state_timer.set_duration(this.construction_time, true);
      this.construction_started = World.game.clock.now();
      return this.built = false;
    };

    Structure.prototype.finish_construction = function() {
      this.state.change_state('operating');
      return this.built = true;
    };

    Structure.prototype.employ_resident = function(resident) {
      if (resident.is_employed() || this.employees.length === this.max_employees) {
        return false;
      }
      resident.set_employer(this.name);
      return this.employees.push(resident);
    };

    Structure.prototype.fire_resident = function(id) {
      var e, key, r, remove_key, _i, _len, _ref1, _ref2;
      remove_key = -1;
      _ref1 = this.employees;
      for (key = _i = 0, _len = _ref1.length; _i < _len; key = ++_i) {
        r = _ref1[key];
        if (r.id === id) {
          remove_key = key;
        }
      }
      if (remove_key > -1) {
        e = this.employees.splice(remove_key, 1);
        return (_ref2 = e[0]) != null ? _ref2.set_employer(null) : void 0;
      }
    };

    Structure.prototype.has_jobs_available = function() {
      return !!(this.max_employees > 0 && this.employees.length < this.max_employees && !this.is_under_construction());
    };

    Structure.prototype.get_view_data = function() {
      var vdata;
      vdata = {};
      switch (this.state.current()) {
        case 'under_construction':
          vdata = {
            construction_time: this.construction_time,
            construction_time_remaining: this.state_timer.remaining(),
            construction_percent_complete: this.state_timer.percent_complete(),
            construction_time_nice: moment.duration(this.construction_time_remaining, 'milliseconds').humanize()
          };
          break;
        case 'needs_workers':
          vdata = {
            built: this.built,
            structure_id: this.id
          };
          break;
        default:
          vdata = {
            built: this.built
          };
      }
      return vdata;
    };

    Structure.prototype.needs_workers = function() {
      if (this.min_employees_to_operate === 0 || this.employees.length >= this.min_employees_to_operate) {
        return this.state.change_state('operating');
      }
    };

    Structure.prototype.operating = function(clock) {};

    Structure.prototype.render = function() {
      if (this.state.current() === "under_construction") {
        this.container.empty();
        this.container.html(this.construction_tmpl(this.get_view_data()));
      }
      if (this.state.current() === "needs_workers") {
        this.container.empty();
        return this.container.html(this.needs_workers_tmpl(this.get_view_data()));
      } else {
        return Structure.__super__.render.call(this, true);
      }
    };

    return Structure;

  })(RenderedObject);

  /* --------------------------------------------
       Begin Crop.coffee
  --------------------------------------------
  */


  Crop = (function(_super) {
    __extends(Crop, _super);

    function Crop() {
      Crop.__super__.constructor.apply(this, arguments);
      this.can_grow_at_night = this.opts.can_grow_at_night;
      this.drops_seeds = this.opts.drops_seeds;
      this.harvest_amount = this.opts.harvest_amount;
      this.growth_rate = this.opts.growth_rate;
      this.planting_rate = this.opts.planting_rate;
      this.harvest_rate = this.opts.harvest_rate;
      this.needs_water = this.opts.needs_water;
      this.type = this.opts.type;
      this.spacing = 2;
      this.state_timer = new Timer();
      this.actual_harvest_amount = 0;
      this.value = this.opts.value;
      this.state.change_state('idle');
      this.is_planted = false;
      this.current_growth = 0;
    }

    Crop.prototype.default_opts = function() {
      return _.extend(Crop.__super__.default_opts.apply(this, arguments), {
        can_grow_at_night: false,
        growth_rate: .9,
        planting_rate: .1,
        harvest_rate: .1,
        drops_seeds: true,
        harvest_amount: [1, 3],
        needs_water: true,
        type: '',
        value: 1
      });
    };

    Crop.prototype.space_needed = function() {
      return this.spacing;
    };

    Crop.prototype.update = function(clock) {
      this.state.update(clock);
      if (!this.state_timer.is_complete()) {
        this.state_timer.update();
      }
      switch (this.state.current()) {
        case 'idle':
          return this.idle();
        case 'planting':
          return this.planting();
        case 'growing':
          return this.growing();
        case 'harvesting':
          return this.harvesting();
        case 'harvested':
          return this.harvested();
        case 'fully_grown':
          return this.fully_grown();
      }
    };

    Crop.prototype.plant_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.planting_rate, 'seconds');
    };

    Crop.prototype.growth_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.growth_rate, 'seconds');
    };

    Crop.prototype.harvest_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.harvest_rate, 'seconds');
    };

    Crop.prototype.idle = function() {};

    Crop.prototype.reset_growth = function() {};

    Crop.prototype.start_planting = function() {
      this.state.change_state('planting');
      return this.state_timer.set_duration(this.plant_rate_to_ticks(), true);
    };

    Crop.prototype.planting = function(clock) {
      this.state_timer.update();
      if (this.state_timer.is_complete()) {
        return this.planting_finished();
      }
    };

    Crop.prototype.planting_finished = function() {
      this.is_planted = true;
      this.container.trigger('planting_finished');
      this.state.change_state('growing');
      return this.state_timer.set_duration(this.growth_rate_to_ticks(), true);
    };

    Crop.prototype.calculate_harvest_amount = function() {
      return Math.floor(Math.random() * this.harvest_amount[1]) + this.harvest_amount[0];
    };

    Crop.prototype.start_harvest = function() {
      this.state.change_state('harvesting');
      return this.state_timer.set_duration(this.harvest_rate_to_ticks(), true);
    };

    Crop.prototype.harvesting = function() {
      this.state_timer.update();
      if (this.state_timer.is_complete()) {
        this.actual_harvest_amount = this.calculate_harvest_amount();
        return this.state.change_state('harvested');
      }
    };

    Crop.prototype.harvested = function() {};

    Crop.prototype.growing = function(clock) {
      if (Math.random() < (this.growth_rate * 10)) {
        this.current_growth += this.growth_rate;
        if (this.current_growth > 100) {
          return this.finish_growing();
        }
      }
    };

    Crop.prototype.current_growth_percent = function() {
      return Math.min(1, this.current_growth / 100);
    };

    Crop.prototype.finish_growing = function() {
      return this.state.change_state('fully_grown');
    };

    Crop.prototype.fully_planted = function() {
      return this.is_planted;
    };

    Crop.prototype.fully_grown = function() {
      return this.state.current() === "fully_grown";
    };

    Crop.prototype.fully_harvested = function() {
      return this.state.current() === "harvested";
    };

    Crop.prototype.harvested_amount = function() {
      return this.actual_harvest_amount;
    };

    return Crop;

  })(RenderedObject);

  /* --------------------------------------------
       Begin Farm.coffee
  --------------------------------------------
  */


  some_crops = {
    wheat: {
      name: 'Wheat'
    },
    potatos: {
      name: 'Potatos'
    },
    carrots: {
      name: 'Carrots'
    },
    rice: {
      name: 'Rice'
    },
    grapes: {
      name: 'Grapes'
    }
  };

  some_crop_menu_items = {};

  for (key in some_crops) {
    crop = some_crops[key];
    some_crop_menu_items[key] = crop.name;
    some_crops[key] = new Crop(null, _.extend(crop, {
      type: key
    }));
  }

  Farm = (function(_super) {
    __extends(Farm, _super);

    function Farm() {
      Farm.__super__.constructor.apply(this, arguments);
      this.available_crops = some_crops;
      this.crop = this.opts.crop;
      this.till_soil_time = WorldClock.duration(.3, 'minutes');
      this.harvest_time = 0;
      this.soil_ready = false;
      this.acres = 1;
      this.crop_capacity = 0;
      this.plots_per_acre = 0;
      this.current_growth_percent = 0;
      this.planted_crops = [];
      this.harvested_crops = [];
      this.crop_storage = {};
      this.total_crops_stored = 0;
      this.last_harvest_amount = 0;
      this.state_timer = new Timer();
      this.plots_available();
    }

    Farm.prototype.default_opts = function() {
      return _.extend(Farm.__super__.default_opts.apply(this, arguments), {
        name: 'Skillet Farms',
        construction_time: WorldClock.duration(5, 'seconds'),
        crop: null,
        available_crops: []
      });
    };

    Farm.prototype.get_view_data = function() {
      var percent_complete;
      percent_complete = this.state.current() === "growing" ? this.current_growth_percent : this.state_timer.percent_complete();
      return _.extend(Farm.__super__.get_view_data.apply(this, arguments), {
        num_employees: this.employees.length,
        crop: this.crop,
        crop_state: this.crop_state,
        state: this.state,
        percent_complete: Math.min(100, Math.round(percent_complete * 100)),
        soil_ready: this.soil_ready,
        harvested_crops: this.harvested_crops,
        planted_crops: this.planted_crops,
        crops_harvested: this.last_harvest_amount,
        crops_stored: this.total_crops_stored
      });
    };

    Farm.prototype.template_id = function() {
      return '#farm-template';
    };

    Farm.prototype.begin_construction = function() {
      this.construction_time = WorldClock.duration(10, 'seconds');
      return Farm.__super__.begin_construction.apply(this, arguments);
    };

    Farm.prototype.setup_events = function() {
      var _this = this;
      return this.container.on('click', function(e) {
        var $el, select_crop_menu;
        e.preventDefault();
        $el = $(e.target);
        switch ($el.data('action')) {
          case 'select_crop':
            select_crop_menu = new SelectCropMenu(null, {
              open: true,
              items: some_crop_menu_items
            });
            return select_crop_menu.container.on('item_selected', function(e, value) {
              if (_.has(_this.available_crops, value)) {
                return _this.set_crop(_this.available_crops[value]);
              }
            });
          case 'start_tilling':
            return _this.state.change_state('start_tilling');
        }
      });
    };

    Farm.prototype.operating = function(clock) {
      Farm.__super__.operating.apply(this, arguments);
      switch (this.state.current()) {
        case 'operating':
          return this.state.change_state('idle');
        case 'idle':
          return this.idle();
        case 'start_tilling':
          return this.start_tilling();
        case 'tilling_soil':
          return this.till_soil(clock);
        case 'planting':
          return this.planting(clock);
        case 'growing':
          return this.growing(clock);
        case 'harvest':
          return this.harvest(clock);
        case 'reset':
          return this.reset(clock);
      }
    };

    Farm.prototype.idle = function() {};

    Farm.prototype.can_change_crop = function() {
      return this.state.current() === "idle";
    };

    Farm.prototype.crops_per_acre = function() {
      if (!this.crop) {
        return;
      }
      this.plots_per_acre = 10 / this.crop.spacing;
      this.crop_capacity = Math.floor(this.plots_per_acre * this.acres);
      this.harvest_time = this.crop_capacity;
      return this.plots_per_acre;
    };

    Farm.prototype.total_plots = function() {
      return Math.floor(this.plots_per_acre * this.acres);
    };

    Farm.prototype.plots_available = function() {
      return this.total_plots() - this.planted_crops.length;
    };

    Farm.prototype.set_crop = function(new_crop, start_planting) {
      if (start_planting == null) {
        start_planting = true;
      }
      if (!this.can_change_crop()) {
        return;
      }
      this.crop = new_crop;
      this.crops_per_acre();
      if (start_planting) {
        if (this.state.current() !== 'idle') {
          return this.reset();
        } else {
          return this.start_tilling();
        }
      }
    };

    Farm.prototype.start_tilling = function() {
      this.state.change_state('tilling_soil');
      return this.state_timer.set_duration(this.till_soil_time * (1 - this.employees.length * .05), true);
    };

    Farm.prototype.till_soil = function(clock) {
      this.state_timer.update();
      if (this.state_timer.is_complete()) {
        return this.start_planting();
      }
    };

    Farm.prototype.start_planting = function() {
      this.soil_ready = true;
      this.state.change_state('planting');
      return this.state_timer.set_duration(this.crop_capacity, true);
    };

    Farm.prototype.planting = function(clock) {
      var last, new_plant;
      if (!clock.is_afternoon()) {
        return;
      }
      last = this.planted_crops.length ? this.planted_crops.length - 1 : false;
      if (last !== false && !this.planted_crops[last].fully_planted()) {
        this.planted_crops[last].update(clock);
        if (this.planted_crops[last].fully_planted()) {
          this.state_timer.update();
        }
      } else if (this.planted_crops.length < this.crop_capacity) {
        new_plant = new Crop(null, this.available_crops[this.crop.type]);
        new_plant.start_planting();
        this.planted_crops.push(new_plant);
      }
      if (this.state_timer.is_complete()) {
        return this.finish_planting();
      }
    };

    Farm.prototype.finish_planting = function(trigger_event) {
      if (trigger_event == null) {
        trigger_event = 'complete';
      }
      if (trigger_event != null) {
        this.container.trigger("planting_" + trigger_event);
      }
      this.state.change_state('growing');
      return this.state_timer.set_duration(this.crop_capacity, true);
    };

    Farm.prototype.growing = function(clock) {
      var c, total_growth_percent, _i, _len, _ref1;
      total_growth_percent = 0;
      _ref1 = this.planted_crops;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        c = _ref1[_i];
        c.update(clock);
        total_growth_percent += c.current_growth_percent();
        if (c.fully_grown()) {
          this.state_timer.update();
        }
      }
      this.current_growth_percent = total_growth_percent / this.planted_crops.length;
      if (this.state_timer.is_complete()) {
        return this.begin_harvest();
      }
    };

    Farm.prototype.begin_harvest = function() {
      this.state.change_state('harvest');
      this.state_timer.set_duration(this.harvest_time, true);
      return this.last_harvest_amount = 0;
    };

    Farm.prototype.harvest = function(clock) {
      var last, next_plant;
      last = this.harvested_crops.length ? this.harvested_crops.length - 1 : false;
      if (last !== false && !this.harvested_crops[last].fully_harvested()) {
        this.harvested_crops[last].update(clock);
        if (this.harvested_crops[last].fully_harvested()) {
          this.state_timer.update();
          this.last_harvest_amount += this.harvested_crops[last].harvested_amount();
        }
      } else if (this.planted_crops.length > 0) {
        next_plant = this.planted_crops.shift();
        next_plant.start_harvest();
        this.harvested_crops.push(next_plant);
      }
      if (this.state_timer.is_complete()) {
        return this.finish_harvest();
      }
    };

    Farm.prototype.finish_harvest = function() {
      this.last_harvest_amount = 0;
      while (crop = this.harvested_crops.shift()) {
        if (!_.has(this.crop_storage, crop.type)) {
          this.crop_storage[crop.type] = 0;
        }
        this.crop_storage[crop.type] += crop.harvested_amount();
        this.total_crops_stored += crop.harvested_amount();
        this.last_harvest_amount += crop.harvested_amount();
      }
      return this.state.change_state('idle');
    };

    Farm.prototype.reset = function(clock) {
      this.state.change_state('idle');
      return this.current_growth_percent = 0;
    };

    Farm.prototype.replant = function() {
      return this.state.change_state('.planting');
    };

    Farm.prototype.get_stored_crops = function() {
      return this.crop_storage;
    };

    Farm.prototype.get_stored_crop_amount = function(crop) {
      if (!_.has(this.crop_storage, crop)) {
        return 0;
      }
      return this.crop_storage[crop];
    };

    return Farm;

  })(Structure);

  /* --------------------------------------------
       Begin Factory.coffee
  --------------------------------------------
  */


  Factory = (function(_super) {
    __extends(Factory, _super);

    function Factory() {
      _ref1 = Factory.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Factory.prototype.template_id = function() {
      return '#factory-template';
    };

    return Factory;

  })(Structure);

  /* --------------------------------------------
       Begin Housing.coffee
  --------------------------------------------
  */


  _house_ids = "abcdefghijklmnopqrstuvwxyz";

  _house_idx = 0;

  _next_house_name = function() {
    var i, letter, letters, _i, _ref2;
    letter = _house_ids[_house_idx % _house_ids.length];
    letters = "";
    for (i = _i = 0, _ref2 = Math.floor(_house_idx / _house_ids.length) + 1; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
      letters += letter;
    }
    _house_idx += 1;
    return "Housing Complex " + (letters.toUpperCase());
  };

  Housing = (function(_super) {
    __extends(Housing, _super);

    function Housing() {
      Housing.__super__.constructor.apply(this, arguments);
      this.max_occupants = 12;
      this.occupants = 0;
      this.rent_cost = 0;
      this.residents = [];
    }

    Housing.prototype.default_opts = function() {
      return _.extend(Housing.__super__.default_opts.apply(this, arguments), {
        name: _next_house_name(),
        min_employees_to_operate: 0
      });
    };

    Housing.prototype.has_vacancy = function() {
      return !this.is_under_construction() && this.occupants < this.max_occupants;
    };

    Housing.prototype.occupancy_percent = function() {
      return this.occupants / this.max_occupants;
    };

    Housing.prototype.vacancy_percent = function() {
      return (this.max_occupants - this.occupants) / this.max_occupants;
    };

    Housing.prototype.begin_construction = function() {
      this.construction_time = WorldClock.duration(.10, 'minutes');
      return Housing.__super__.begin_construction.apply(this, arguments);
    };

    Housing.prototype.move_resident_in = function(resident) {
      if (this.occupants === this.max_occupants) {
        new ErrorAlert('No vacancy!').delayed_dismiss();
        throw 'Max occupants in housing';
      }
      this.occupants += 1;
      return this.residents.push(resident);
    };

    Housing.prototype.move_resident_out = function(resident) {
      var r, residents_new, _i, _len, _ref2;
      if (this.occupants === 0) {
        return;
      }
      this.occupants -= 1;
      residents_new = [];
      _ref2 = this.residents;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        r = _ref2[_i];
        if (resident.id !== r.id) {
          residents_new.push(r);
        }
      }
      return this.residents = residents_new;
    };

    Housing.prototype.get_resident = function(id) {
      var found, r, _i, _len, _ref2;
      found = null;
      _ref2 = this.residents;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        r = _ref2[_i];
        if (r.id = id) {
          found = r;
        }
      }
      return found;
    };

    Housing.prototype.get_view_data = function() {
      var vdata;
      vdata = {};
      switch (this.state.current()) {
        case 'under_construction':
          vdata = Housing.__super__.get_view_data.apply(this, arguments);
          break;
        case 'operating':
          vdata = {
            structure: this,
            occupants: this.residents
          };
      }
      return vdata;
    };

    Housing.prototype.template_id = function() {
      return '#housing-template';
    };

    return Housing;

  })(Structure);

  /* --------------------------------------------
       Begin Player.coffee
  --------------------------------------------
  */


  Player = (function() {
    function Player() {}

    return Player;

  })();

  /* --------------------------------------------
       Begin main.coffee
  --------------------------------------------
  */


  pin = function(extra) {
    if (extra == null) {
      extra = null;
    }
    return console.log("Hit pin " + (this.id ? this.id += 1 : this.id = 1), extra);
  };

  /* --------------------------------------------
       Begin game.coffee
  --------------------------------------------
  */


  ModTownGame = (function(_super) {
    __extends(ModTownGame, _super);

    function ModTownGame() {
      var _this = this;
      ModTownGame.__super__.constructor.apply(this, arguments);
      this.clock = new WorldClock();
      _.defer(function() {
        return _this.flux_menu = new FluxMenu(null, {
          clock: _this.clock
        });
      });
      this.weather = new WeatherSystem();
      this.state = new StateManager('init');
      this.setup_player();
      this.setup_hud();
      this.setup_town();
      this.setup_events();
      this.state.change_state('running');
      this.clock.on_tick(function() {
        return _this.update();
      });
      this.clock.tick();
    }

    ModTownGame.prototype.setup_player = function() {
      return this.player = new Player();
    };

    ModTownGame.prototype.setup_town = function() {
      var town_opts,
        _this = this;
      town_opts = {
        name: 'AhhsumTown',
        balance: 1000
      };
      this.town = new Town(this.container.find('#town'), town_opts);
      return _.defer(function() {
        return _this.town.create_street({
          blocks: 4
        });
      });
    };

    ModTownGame.prototype.setup_hud = function() {
      var _this = this;
      this.hud = new HUD(this.container.find('#hud'), {
        town: this.town
      });
      return this.hud.container.on('btn_pressed', function(e, action) {
        var $el;
        $el = $("[data-action=" + action + "]");
        switch (action) {
          case 'add_street':
            return _this.town.create_street({
              blocks: 1
            });
          case 'pause':
            $el.text('Resume').data('action', 'resume');
            return _this.pause();
          case 'resume':
            $el.text('Pause').data('action', 'pause');
            return _this.resume();
        }
      });
    };

    ModTownGame.prototype.pause = function(resume_in) {
      var _this = this;
      if (resume_in == null) {
        resume_in = null;
      }
      this.state.change_state('paused');
      if (this.timeout) {
        clearInterval(this.timeout);
      }
      if (resume_in) {
        return setTimeout(function() {
          return _this.resume();
        }, resume_in);
      }
    };

    ModTownGame.prototype.resume = function() {
      return this.state.change_state('running');
    };

    ModTownGame.prototype.update = function() {
      this.state.update();
      switch (this.state.current()) {
        case 'running':
          this.weather.update(this.clock);
          this.town.update(this.clock, this.weather);
          this.hud.update({
            town: this.town,
            player: this.player,
            clock: this.clock,
            weather: this.weather
          });
      }
      return this.render();
    };

    ModTownGame.prototype.render = function() {
      ModTownGame.__super__.render.apply(this, arguments);
      this.hud.render();
      return this.town.render();
    };

    return ModTownGame;

  })(RenderedObject);

  $(function() {
    return World.game = new ModTownGame("#container");
  });

}).call(this);
