// Generated by CoffeeScript 1.10.0
(function() {
  var Address, Alert, Biome, Block, BuildMenu, Calendar, Confirm, Crop, DeliveryTruck, ErrorAlert, FloatingMenu, FluxMenu, FundsNotAvailableAlert, GPS, HUD, HireWorkersMenu, ModTownGame, Overlay, Overworld, Player, Popup, RenderedObject, Resident, ResidentMenu, SelectCropMenu, SelectHouseMenu, SelectJobMenu, StateManager, StateObject, Storage, Street, Structure, StructureMenu, Timer, Town, VisitorMenu, WeatherSystem, WorldClock, _auto_id, _house_ids, _house_idx, _next_house_name, _next_id, crop, key, pin, some_crop_menu_items, some_crops,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StateObject = (function() {
    function StateObject() {
      this.bindings = {};
      this.state = new StateManager('idle');
      this.state_timer = new Timer();
    }

    StateObject.prototype.update = function() {
      this.state.update();
      if (this.state_timer.mode === "auto") {
        return this.state_timer.update();
      }
    };

    StateObject.prototype.on = function(event_name, fn, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      if (!_.has(this.bindings, event_name) || overwrite) {
        this.bindings[event_name] = [];
      }
      return this.bindings[event_name].push(fn);
    };

    StateObject.prototype.off = function(event_name, fn, destroy_all) {
      var func, i, j, len, ref, results1;
      if (destroy_all == null) {
        destroy_all = false;
      }
      if (_.has(this.bindings, event_name)) {
        if (destroy_all) {
          return delete this.bindings[event_name];
        } else {
          ref = this.bindings[event_name];
          results1 = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            func = ref[i];
            if (func.toString() === fn.toString()) {
              results1.push(delete this.bindings[event_name][i]);
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }
      }
    };

    StateObject.prototype.trigger = function(event_name, data) {
      var fn, j, len, ref, results1;
      if (data == null) {
        data = null;
      }
      if (!_.has(this.bindings, event_name)) {
        return;
      }
      ref = this.bindings[event_name];
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        fn = ref[j];
        results1.push(fn != null ? fn.apply(this, data) : void 0);
      }
      return results1;
    };

    return StateObject;

  })();

  Address = (function() {
    Address.block_distance = 10;

    Address.compare = function(first, second) {
      var matched;
      if (!(first.is_valid() && second.is_valid())) {
        return false;
      }
      return matched = first.street === second.street && first.block === second.block;
    };

    Address.distance_between = function(first, second) {
      var distance;
      if (!(first.is_valid() && second.is_valid())) {
        return 0;
      }
      return distance = Math.abs(first.street - second.street) + Math.abs(first.block - second.block) * Address.block_distance;
    };

    function Address(street, block) {
      if (street == null) {
        street = null;
      }
      if (block == null) {
        block = null;
      }
      this.street = street;
      this.block = block;
    }

    Address.prototype.is_valid = function() {
      return !!(this.street && this.block);
    };

    return Address;

  })();

  GPS = (function() {
    function GPS(town) {
      this.town = town != null ? town : null;
    }

    GPS.prototype.get_travel_time_between = function(point_a, point_b, travel_speed) {
      var distance, time;
      if (travel_speed == null) {
        travel_speed = 1;
      }
      distance = Address.distance_between(point_a, point_b);
      time = 0;
      if (distance) {
        time = distance * travel_speed;
      }
      return time;
    };

    return GPS;

  })();

  World.GPS = GPS;

  Calendar = (function() {
    function Calendar() {}

    Calendar.days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    Calendar.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    Calendar.get_month = function(index) {
      if (index >= Calendar.months.length) {
        return false;
      }
      return Calendar.months[index];
    };

    Calendar.get_day = function(index) {
      if (index >= Calendar.days.length) {
        return false;
      }
      return Calendar.days[index];
    };

    return Calendar;

  })();

  World.Calendar = Calendar;


  /*
   * Timer
   * 
   * Even though Timer is technically built to run like a StateObject, it is a prerequisite for
   * StateObject so it cannot extend it.
   */

  Timer = (function() {
    function Timer(duration1, on_complete1, on_tick, mode1) {
      this.duration = duration1 != null ? duration1 : 0;
      this.on_complete = on_complete1 != null ? on_complete1 : null;
      this.on_tick = on_tick != null ? on_tick : null;
      this.mode = mode1 != null ? mode1 : 'manual';
      this.ticks = 0;
      this.timeout = null;
      this.state = new StateManager('init');
      this.allow_auto_start = true;
      this.mode = this.mode;
    }

    Timer.prototype.on = function(what, fn) {
      switch (what) {
        case 'on_tick':
          return this.on_tick = fn;
        case 'complete':
          return this.on_complete = fn;
      }
    };

    Timer.prototype.start = function(repeat, tick_every) {
      if (repeat == null) {
        repeat = false;
      }
      if (tick_every == null) {
        tick_every = 1000;
      }
      this.state.change_state('running');
      if (repeat) {
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        return this.timeout = setTimeout((function(_this) {
          return function() {
            return _this.update(true, tick_every);
          };
        })(this), tick_every);
      }
    };

    Timer.prototype.pause = function() {
      return this.state.change_state('paused');
    };

    Timer.prototype.stop = function() {
      return this.state.change_state('stopped');
    };

    Timer.prototype.resume = function() {
      return this.state.change_state('running');
    };

    Timer.prototype.tick = function() {
      this.ticks += 1;
      if (typeof this.on_tick === "function") {
        this.on_tick(this.ticks);
      }
      if (this.duration > 0 && this.ticks > this.duration) {
        return this.finish();
      }
    };

    Timer.prototype.update = function() {
      this.state.update();
      switch (this.state.current()) {
        case 'idle':
          if (this.allow_auto_start) {
            return this.start();
          }
          break;
        case 'reset':
          return this.start();
        case 'running':
          return this.tick();
        case 'stopped':
          if (this.timeout) {
            clearTimeout(this.timeout);
          }
          return this.reset();
      }
    };

    Timer.prototype.remaining = function() {
      return this.duration - this.ticks;
    };

    Timer.prototype.remaining_percent = function() {
      return (this.duration - this.ticks) / this.duration;
    };

    Timer.prototype.percent_complete = function() {
      return Math.min(1, this.ticks / this.duration);
    };

    Timer.prototype.is_complete = function() {
      return this.ticks > this.duration;
    };

    Timer.prototype.is_running = function() {
      return this.state.current() === "running";
    };

    Timer.prototype.finish = function() {
      if (typeof this.on_complete === "function") {
        this.on_complete();
      }
      return this.state.change_state('complete');
    };

    Timer.prototype.reset = function() {
      this.ticks = 1;
      return this.state.change_state('reset');
    };

    Timer.prototype.set_duration = function(new_dur, reset, mode) {
      if (reset == null) {
        reset = false;
      }
      if (mode == null) {
        mode = this.mode;
      }
      if (new_dur > -1) {
        this.duration = new_dur;
      }
      if (mode !== this.mode) {
        this.set_mode(mode);
      }
      if (reset) {
        return this.reset();
      }
    };

    Timer.prototype.set_mode = function(mode) {
      return this.mode = mode;
    };

    return Timer;

  })();

  World.Timer = Timer;

  WorldClock = (function() {
    WorldClock.max_seconds = 1;

    WorldClock.max_minutes = 60;

    WorldClock.minutes_in_hour = WorldClock.max_minutes;

    WorldClock.max_hours = 24;

    WorldClock.hours_in_day = WorldClock.max_hours;

    WorldClock.max_days = 30;

    WorldClock.days_in_week = 7;

    WorldClock.days_in_month = WorldClock.max_days;

    WorldClock.max_months = 12;

    WorldClock.months_in_year = WorldClock.max_months;

    WorldClock.days_in_year = WorldClock.max_days * WorldClock.max_months;

    WorldClock.seconds_in_minute = WorldClock.max_seconds;

    WorldClock.seconds_in_hour = WorldClock.seconds_in_minute * WorldClock.max_minutes;

    WorldClock.seconds_in_day = WorldClock.seconds_in_hour * WorldClock.max_hours;

    WorldClock.seconds_in_month = WorldClock.seconds_in_day * WorldClock.max_days;

    WorldClock.seconds_in_year = WorldClock.seconds_in_month * WorldClock.max_months;

    WorldClock.duration = function(amount, of_what) {
      var in_seconds;
      if (of_what == null) {
        of_what = 'seconds';
      }
      in_seconds = 0;
      switch (of_what) {
        case 'seconds' || 's':
          in_seconds = amount;
          break;
        case 'minutes' || 'm':
          in_seconds = amount * WorldClock.seconds_in_minute;
          break;
        case 'hours' || 'h':
          in_seconds = amount * WorldClock.seconds_in_hour;
          break;
        case 'days' || 'd':
          in_seconds = amount * WorldClock.seconds_in_day;
          break;
        case 'months' || 'mo':
          in_seconds = amount * WorldClock.seconds_in_month;
          break;
        case 'years' || 'y':
          in_seconds = amount * WorldClock.seconds_in_year;
      }
      return in_seconds;
    };

    WorldClock.prototype.dur = function(amount, of_what) {
      if (of_what == null) {
        of_what = 'second';
      }
      return WorldClock.duration(amount, of_what);
    };

    function WorldClock() {
      this.time_speedx = 1;
      this.since_epoch = 0;
      this.second = 0;
      this.minute = 0;
      this.hour = 0;
      this.day = 0;
      this.month = 0;
      this.year = 0;
      this.since_epoch = this.dur("6", "hours");
      this.epoch_skewed = false;
      this.paused = false;
      this.timeout = null;
      this.timers = [];
      this.on_tick_fn = null;
    }

    WorldClock.prototype.tick = function(set_timeout) {
      var onetick;
      if (set_timeout == null) {
        set_timeout = true;
      }
      this.update();
      if (set_timeout) {
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        onetick = 1000;
        if (this.time_speedx > 1) {
          onetick = 1000 * 1 / this.time_speedx;
        } else if (this.time_speedx < 1) {
          onetick = 1000 * (1 + this.time_speedx);
        }
        this.timeout = setTimeout((function(_this) {
          return function() {
            return _this.tick();
          };
        })(this), onetick);
        return typeof this.on_tick_fn === "function" ? this.on_tick_fn() : void 0;
      }
    };

    WorldClock.prototype.sync = function() {};

    WorldClock.prototype.update = function() {
      if (this.paused) {
        return;
      }
      this.since_epoch += 1;
      if (this.since_epoch < WorldClock.max_seconds) {
        this.second = this.since_epoch;
      } else {
        this.second = this.since_epoch % WorldClock.max_seconds;
      }
      this.minute = this.since_epoch / WorldClock.seconds_in_minute % WorldClock.max_minutes;
      this.hour = this.since_epoch / WorldClock.seconds_in_hour % WorldClock.max_hours;
      this.month = Math.floor(this.since_epoch / WorldClock.seconds_in_month % WorldClock.max_months);
      this.day = 1 + Math.floor(this.since_epoch / WorldClock.seconds_in_day % WorldClock.max_days);
      this.year = Math.floor(this.since_epoch / WorldClock.seconds_in_year);
      return this.update_timers();
    };

    WorldClock.prototype.update_timers = function() {
      var j, len, ref, results1, timer;
      ref = this.timers;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        timer = ref[j];
        results1.push(timer.update());
      }
      return results1;
    };

    WorldClock.prototype.now = function() {
      return this.get_time();
    };

    WorldClock.prototype.day_in_year = function() {
      return this.month * WorldClock.max_days + this.day;
    };

    WorldClock.prototype.since_midnight = function() {
      return this.now() % WorldClock.seconds_in_day;
    };

    WorldClock.prototype.is_morning = function() {
      return this.since_midnight() > this.dur('6', 'hours') && this.since_midnight() < this.dur("11", "hours");
    };

    WorldClock.prototype.is_night = function() {
      return this.now() >= this.dur(WorldClock.hours_in_a_day - 3, 'hours') || this.since_midnight() < this.dur('6', 'hours');
    };

    WorldClock.prototype.is_evening = function() {
      return this.now() >= this.dur('6', 'hours') && !this.is_night();
    };

    WorldClock.prototype.is_afternoon = function() {
      return !this.is_morning() && !this.is_evening() && !this.is_night();
    };

    WorldClock.prototype.is_am = function() {
      return this.since_midnight() < WorldClock.max_hours / 2;
    };

    WorldClock.prototype.is_pm = function() {
      return !this.is_am();
    };

    WorldClock.prototype.get_time = function(format) {
      if (format == null) {
        format = null;
      }
      if (!format) {
        return this.since_epoch;
      }
      format = format.replace('h', this.get_hours(true));
      format = format.replace('m', this.get_minutes(true));
      format = format.replace('s', this.get_seconds(true));
      format = format.replace('d', this.get_day());
      format = format.replace('y', this.get_year());
      format = format.replace('mo', this.get_month());
      return format;
    };

    WorldClock.prototype.get_hours = function(format) {
      var h;
      if (format == null) {
        format = false;
      }
      h = Math.floor(this.hour);
      if (format) {
        if (h < 10) {
          return '0' + h.toString();
        } else {
          return h.toString();
        }
      } else {
        return h;
      }
    };

    WorldClock.prototype.get_minutes = function(format) {
      var m;
      if (format == null) {
        format = false;
      }
      m = Math.floor(this.minute);
      if (format) {
        if (m < 10) {
          return '0' + m.toString();
        } else {
          return m.toString();
        }
      } else {
        return m;
      }
    };

    WorldClock.prototype.get_seconds = function(format) {
      var s;
      if (format == null) {
        format = false;
      }
      s = Math.floor(this.second);
      if (format) {
        if (s < 10) {
          return '0' + s.toString();
        } else {
          return s.toString();
        }
      } else {
        return this.second;
      }
    };

    WorldClock.prototype.get_day = function() {
      return Calendar.get_day(this.day_in_year() % WorldClock.days_in_week);
    };

    WorldClock.prototype.get_day_in_month = function() {
      return this.day;
    };

    WorldClock.prototype.get_year = function() {
      return this.year + 1;
    };

    WorldClock.prototype.get_month = function() {
      return Calendar.get_month(this.month);
    };

    WorldClock.prototype.create_timer = function(duration, on_complete) {
      var new_timer;
      if (duration == null) {
        duration = 0;
      }
      if (on_complete == null) {
        on_complete = null;
      }
      new_timer = new Timer(duration, on_complete);
      this.timers.push(new_timer);
      return new_timer;
    };

    WorldClock.prototype.set_time = function(new_epoch) {
      this.since_epoch = new_epoch;
      this.epoch_skewed = true;
      throw 'Time warp! *No matter what*.. do not erase past instances of yourself.';
    };

    WorldClock.prototype.add_time = function(amount, of_what) {
      if (amount == null) {
        amount = 1;
      }
      if (of_what == null) {
        of_what = "seconds";
      }
      this.epoch_skewed = true;
      return this.since_epoch += WorldClock.duration(amount, of_what);
    };

    WorldClock.prototype.subtract_time = function(amount, of_what) {
      if (amount == null) {
        amount = 1;
      }
      if (of_what == null) {
        of_what = "seconds";
      }
      this.epoch_skewed = true;
      return this.since_epoch -= WorldClock.duration(amount, of_what);
    };

    WorldClock.prototype.on_tick = function(fn) {
      return this.on_tick_fn = fn;
    };

    WorldClock.prototype.time_speed_plus = function() {
      return this.time_speedx = Math.min(4, this.time_speedx + .5);
    };

    WorldClock.prototype.time_speed_minus = function() {
      return this.time_speedx = Math.max(.5, this.time_speedx - .5);
    };

    WorldClock.prototype.time_speed_default = function() {
      return this.time_speedx = 1;
    };

    WorldClock.prototype.pause_time = function() {
      return this.paused = true;
    };

    WorldClock.prototype.ampm = function() {
      var ampm;
      return ampm = this.hours >= 12 ? 'pm' : 'am';
    };

    WorldClock.prototype.resume_time = function() {
      return this.paused = false;
    };

    return WorldClock;

  })();

  World.WorldClock = WorldClock;

  WeatherSystem = (function() {
    WeatherSystem.seasons = ['Spring', 'Summer', 'Fall', 'Winter'];

    WeatherSystem.months_in_season = 3;

    WeatherSystem.days_in_season = WeatherSystem.months_in_season * WorldClock.days_in_month;

    WeatherSystem.get_season = function(month) {
      return WeatherSystem.seasons[Math.floor(month / WeatherSystem.months_in_season) % Calendar.seasons.length];
    };

    function WeatherSystem() {
      this.state = new StateManager('sunny');
      this.season = 0;
      this.year_progress = 0;
      this.season_progress = 0;
      this.weather_system_started = 0;
      this.state = new StateManager('sunny');
      this.sun_state = new StateManager('set');
      this.clouds_state = new StateManager('clear');
      this.time_of_day_state = new StateManager('morning');
      this.sun_schedule = [];
      this.create_sun_schedule();
      this.temperature = 0;
      this.temperature_highs_lows = [];
    }

    WeatherSystem.prototype.create_sun_schedule = function() {
      var adjust, i, j, ref, results1;
      this.sun_schedule = [];
      results1 = [];
      for (i = j = 1, ref = WorldClock.days_in_year; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        adjust = Math.sin(i / WorldClock.days_in_year) * .2;
        results1.push(this.sun_schedule.push({
          rise_time: (.2 + adjust) * WorldClock.seconds_in_day,
          set_time: (.8 - adjust) * WorldClock.seconds_in_day
        }));
      }
      return results1;
    };

    WeatherSystem.prototype.current_season = function() {
      return WeatherSystem.seasons[this.season];
    };

    WeatherSystem.prototype.sun_is_up = function() {
      return this.sun_state.current() === "up" || this.sun_state.current() === "rising";
    };

    WeatherSystem.prototype.update_sun = function(day, time_as_seconds) {
      var rise_time, schedule, set_time;
      schedule = this.sun_schedule[day];
      rise_time = WorldClock.duration('40', 'minutes');
      set_time = rise_time;
      switch (this.sun_state.current()) {
        case 'set':
          if (time_as_seconds < day.rise_time) {
            if (time_as_seconds + rise_time > day.rise_time) {
              this.sun_state.change_state('rising');
              return this.time_of_day_state.change_state('morning');
            }
          }
          break;
        case 'rising':
          if (time_as_seconds >= day.rise_time) {
            return this.sun_state.change_state('up');
          }
          break;
        case 'up':
          if (time_as_seconds + set_time > day.set_time) {
            return this.sun_state.change_state('setting');
          } else if (time_as_seconds > WorldClock.seconds_in_day * .42) {
            return this.time_of_day_state.change_state('afternoon');
          }
          break;
        case 'setting':
          if (time_as_seconds >= day.set_time) {
            this.sun_state.change_state('set');
            return this.time_of_day_state.change_state('night');
          }
      }
    };

    WeatherSystem.prototype.update = function(clock) {
      var day_index;
      day_index = clock.day_in_year();
      this.season = Math.floor(day_index / WeatherSystem.days_in_season);
      this.year_progress = day_index / WorldClock.days_in_year;
      this.season_progress = (day_index % WeatherSystem.days_in_season) / WeatherSystem.days_in_season;
      this.update_sun(day_index, clock.since_midnight());
      switch (this.current_season()) {
        case 'Spring':
          this.spring(clock);
          break;
        case 'Summer':
          this.summer(clock);
          break;
        case 'Fall':
          this.fall(clock);
          break;
        case 'Winter':
          this.winter(clock);
      }
      this.state.update();
      this.clouds_state.update();
      this.sun_state.update();
      return this.time_of_day_state.update();
    };

    WeatherSystem.prototype.begin_raining = function(duration, timenow) {
      var strength;
      if (duration == null) {
        duration = 0;
      }
      if (timenow == null) {
        timenow = 0;
      }
      strength = Math.random() + .4;
      this.weather_system_ends_at = strength * WeatherSystem.avg_spring_rain_duration;
      this.weather_system_started = timenow;
      return this.state.change_state('raining');
    };

    WeatherSystem.prototype.stop_raining = function() {
      this.weather_system_ends_at = null;
      this.weather_system_started = 0;
      return this.state.change_state('clear');
    };

    WeatherSystem.prototype.spring = function(clock) {
      var avg_rain_duration;
      avg_rain_duration = WorldClock.duration(3, 'hours');
      switch (this.state.current()) {
        case 'clear':
          if (Math.random() < WeatherSystem.spring_rain_chance) {
            return this.begin_raining(clock.now(), WeatherSystem.avg_spring_rain_duration);
          }
          break;
        case 'raining':
          if (clock.now() > this.weather_system_ends_at) {
            return this.stop_raining();
          }
          break;
        default:
          return this.state.change_state('clear');
      }
    };

    WeatherSystem.prototype.summer = function(clock) {
      if (this.state.current() !== 'clear') {
        return this.state.change_state('clear');
      }
    };

    WeatherSystem.prototype.fall = function(clock) {
      if (this.state.current() !== 'overcast') {
        return this.state.change_state('overcast');
      }
    };

    WeatherSystem.prototype.winter = function(clock) {
      if (this.state.current() !== 'clear') {
        return this.state.change_state('clear');
      }
    };

    return WeatherSystem;

  })();

  World.WeatherSystem = WeatherSystem;

  Storage = (function() {
    function Storage(max_capacity) {
      this.max_capacity = max_capacity != null ? max_capacity : 1;
      this.num_stored_items = 0;
      this.items = {};
    }

    Storage.prototype.get_items = function() {
      return this.items;
    };

    Storage.prototype.is_empty = function() {
      return this.num_stored_items === 0;
    };

    Storage.prototype.is_full = function() {
      return this.num_stored_items === this.max_capacity;
    };

    Storage.prototype.get_num_items = function() {
      return this.num_stored_items;
    };

    Storage.prototype.over_capacity = function() {
      return this.num_stored_items > this.max_capacity;
    };

    Storage.prototype.get_num_items_by_type = function(type) {
      if (!_.has(this.items, type)) {
        return -1;
      }
      return this.items[type];
    };

    Storage.prototype.can_fit_items = function(num_items) {
      if (num_items == null) {
        num_items = 0;
      }
      return this.num_stored_items + num_items < this.max_capacity;
    };

    Storage.prototype.how_many_can_fit = function(amount) {
      var fits, leftover;
      fits = this.max_capacity - this.num_stored_items;
      leftover = amount - fits;
      return [fits, leftover];
    };

    Storage.prototype.store_items = function(type, amount, all_or_nothing) {
      var can_fit, ref, remaining, return_amount;
      if (amount == null) {
        amount = 1;
      }
      if (all_or_nothing == null) {
        all_or_nothing = true;
      }
      if (!_.has(this.items, type)) {
        this.items[type] = 0;
      }
      return_amount = 0;
      if (this.can_fit_items(amount)) {
        this.items[type] += amount;
      } else if (!all_or_nothing && this.can_fit_items(1)) {
        ref = this.how_many_can_fit(amount), can_fit = ref[0], remaining = ref[1];
        this.items[type] += can_fit;
        return_amount = remaining;
      } else {
        throw 'Not enough room to store items';
        return_amount = amount;
      }
      this.items_updated();
      return return_amount;
    };

    Storage.prototype.remove_items = function(type, amount) {
      var num_items;
      if (amount == null) {
        amount = 1;
      }
      num_items = this.get_num_items_by_type(type);
      if (num_items < 0) {
        throw 'Item not available in storage';
        return false;
      } else if (num_items >= amount) {
        this.items[type] -= amount;
        console.log('subtracted storage', this.items[type], amount);
      } else if (amount > num_items) {
        this.items[type] = 0;
        amount = num_items;
      }
      this.items_updated();
      return amount;
    };

    Storage.prototype.retrieve_items = function(type, amount) {
      var j, len, retrieved_items, total_retrieved, types;
      if (type == null) {
        type = 'all';
      }
      if (amount == null) {
        amount = 1;
      }
      total_retrieved = 0;
      retrieved_items = {};
      if (type === 'all') {
        types = this.get_item_types();
        for (j = 0, len = types.length; j < len; j++) {
          type = types[j];
          if (total_retrieved < amount) {
            retrieved_items[type] = this.remove_items(type, amount);
            total_retrieved += retrieved_items[type];
          } else {
            break;
          }
        }
      } else {
        retrieved_items[type] = this.remove_items(type, amount);
        total_retrieved = retrieved_items[type];
      }
      return [retrieved_items, total_retrieved];
    };

    Storage.prototype.items_updated = function() {
      var items, key, ref;
      this.num_stored_items = 0;
      ref = this.items;
      for (key in ref) {
        items = ref[key];
        this.num_stored_items += items;
      }
      return this.num_stored_items;
    };

    Storage.prototype.get_item_types = function() {
      return _.keys(this.items);
    };

    Storage.prototype.take_items_from = function(storage, type, amount) {
      var count, items, key, ref, total_amount;
      if (type == null) {
        type = 'all';
      }
      if (amount == null) {
        amount = 1;
      }
      ref = storage.retrieve_items('all', amount), items = ref[0], total_amount = ref[1];
      console.log('retrieved items', items, total_amount);
      for (key in items) {
        count = items[key];
        this.store_items(key, count, false);
      }
      return this.items_updated();
    };

    Storage.prototype.take_all_items_from = function(storage, type) {
      if (type == null) {
        type = 'all';
      }
      return this.take_items_from(storage, type, this.max_capacity);
    };

    return Storage;

  })();

  _next_id = 0;

  _auto_id = function() {
    return _next_id += 1;
  };

  RenderedObject = (function(superClass) {
    extend(RenderedObject, superClass);

    function RenderedObject(container, opts) {
      if (opts == null) {
        opts = {};
      }
      RenderedObject.__super__.constructor.apply(this, arguments);
      this.container = $(container);
      this.tmpl = this.set_template(this.template_id());
      this.rendered = false;
      this.set_opts(opts);
      this.view_data = this.opts.view_data;
      this.name = this.opts.name != null ? this.opts.name : '';
      this.id = this.opts.id != null ? this.opts.id : _auto_id();
      this.setup_events();
      if (this.opts.render) {
        this.render();
      }
    }

    RenderedObject.prototype.change_state = function(new_state) {
      return this.state.change_state(new_state);
    };

    RenderedObject.prototype.default_opts = function() {
      return {
        name: '',
        render: false,
        view_data: {}
      };
    };

    RenderedObject.prototype.set_opts = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.opts = _.extend(this.default_opts(), opts);
    };

    RenderedObject.prototype.template_id = function() {
      return null;
    };

    RenderedObject.prototype.set_template = function(tmpl_id) {
      var new_tmpl;
      if (!tmpl_id) {
        return null;
      }
      new_tmpl = _.template($(tmpl_id).html());
      if (!new_tmpl) {
        return;
      }
      return this.tmpl = new_tmpl;
    };

    RenderedObject.prototype.get_view_data = function() {
      return _.extend({
        id: this.id,
        name: this.name
      }, this.view_data);
    };

    RenderedObject.prototype.set_view_data = function(key, val) {
      return this.view_data[key] = val;
    };

    RenderedObject.prototype.clear_view_data = function() {
      return this.view_data = [];
    };

    RenderedObject.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          return e.preventDefault();
        };
      })(this));
    };

    RenderedObject.prototype.render = function(force) {
      if (force == null) {
        force = false;
      }
      if ((this.rendered && !force) || !this.tmpl) {
        return;
      }
      this.container.empty();
      this.container.html(this.tmpl(_.extend(this.view_data, this.get_view_data())));
      return this.rendered = true;
    };

    return RenderedObject;

  })(StateObject);

  Overlay = (function(superClass) {
    extend(Overlay, superClass);

    function Overlay() {
      return Overlay.__super__.constructor.apply(this, arguments);
    }

    Overlay.prototype.show = function() {
      if (this.container.hasClass('show') || this.container.hasClass('transitioning')) {
        return;
      }
      return this.container.addClass('transitioning').fadeIn((function(_this) {
        return function() {
          return _this.container.removeClass('transitioning').addClass('show');
        };
      })(this));
    };

    Overlay.prototype.hide = function() {
      return this.container.fadeOut((function(_this) {
        return function() {
          return _this.container.removeClass('show');
        };
      })(this));
    };

    return Overlay;

  })(RenderedObject);

  World.Overlay = Overlay;

  Popup = (function(superClass) {
    extend(Popup, superClass);

    Popup.Create = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts = _.extend({
        open: true
      }, opts);
      return new Popup(null, opts);
    };

    Popup.CreateModal = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts = _.extend({
        open: true,
        is_modal: true
      }, opts);
      return new Popup(null, opts);
    };

    function Popup(container, opts) {
      if (opts == null) {
        opts = {};
      }
      Popup.__super__.constructor.apply(this, arguments);
      if (!this.container.length) {
        this.container = $('<div/>').addClass('popup');
        $('body').append(this.container.hide());
      }
      this.title = this.opts.title;
      this.message = this.opts.message;
      this.is_modal = this.opts.is_modal;
      this.set_body_template(this.opts.body_template);
      this.classes = this.opts.classes;
      if (this.opts.wide) {
        this.classes.push('wide');
      }
      this.default_position = this.container.position();
      this.setup_events();
      this.render(true);
      if (this.opts.position_for.length > 1) {
        this.best_position_for(this.opts.position_for[0], this.opts.position_for[1]);
      } else {
        this.set_position_in_window(this.opts.position_in_window);
      }
      if (this.opts.open) {
        this.open();
      }
    }

    Popup.prototype.default_opts = function() {
      return _.extend(Popup.__super__.default_opts.apply(this, arguments), {
        title: 'Popup Item',
        body_template: null,
        open: false,
        message: '',
        is_modal: false,
        position_for: [],
        position_in_window: 'center',
        classes: [],
        wide: false
      });
    };

    Popup.prototype.template_id = function() {
      return '#popup-template';
    };

    Popup.prototype.setup_events = function() {
      if (!this.container.length) {
        return;
      }
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          e.preventDefault();
          $el = $(e.target);
          if ($el.is('[data-action=cancel]')) {
            _this.close();
            return _this.trigger('cancel');
          }
        };
      })(this));
    };

    Popup.prototype.set_body_template = function(template_id, render) {
      if (template_id == null) {
        template_id = null;
      }
      if (render == null) {
        render = false;
      }
      if (!template_id) {
        return;
      }
      if (!$(template_id).length) {
        throw "Body Template " + template_id + " not found";
      }
      this.body_template = _.template($("" + template_id).html());
      if (render) {
        return this.render(true);
      }
    };

    Popup.prototype.get_view_data = function() {
      return _.extend(Popup.__super__.get_view_data.apply(this, arguments), {
        title: this.title,
        message: this.message
      });
    };

    Popup.prototype.close = function() {
      if (this.is_modal) {
        World.window_overlay.hide();
      }
      return this.container.hide().trigger('close');
    };

    Popup.prototype.hide = function() {
      return this.close();
    };

    Popup.prototype.open = function() {
      if (this.is_modal) {
        World.window_overlay.show();
      }
      this.render(true);
      return this.container.show().trigger('open');
    };

    Popup.prototype.show = function() {
      return this.open();
    };

    Popup.prototype.destroy = function() {
      if (this.is_modal) {
        World.window_overlay.hide();
      }
      this.container.trigger('destroy').hide();
      return this.container.unbind().remove();
    };

    Popup.prototype.set_title = function(new_title) {
      this.title = new_title;
      this.set_view_data('title', this.title);
      this.render(true);
      return this.container.trigger('title_changed');
    };

    Popup.prototype.set_message = function(new_message) {
      this.message = new_message;
      this.set_view_data('message', this.message);
      return this.render(true);
    };

    Popup.prototype.set_position = function(x, y) {
      return this.container.css({
        top: y,
        left: x
      });
    };

    Popup.prototype.set_position_in_window = function(pos) {
      var $w, bottom_y, center_x, center_y, coords, left_x, right_x, top_y;
      if (pos == null) {
        pos = 'center';
      }
      $w = $(window);
      this.position_in_window = pos;
      coords = [0, 0];
      center_x = $w.width() / 2 - this.container.outerWidth() / 2;
      center_y = $w.height() / 2 - this.container.outerHeight() / 2;
      left_x = 0;
      right_x = $w.width() - this.container.outerWidth();
      top_y = 0;
      bottom_y = $w.height() - this.container.outerHeight();
      switch (this.position_in_window) {
        case 'center':
          coords[0] = center_x;
          coords[1] = center_y;
          break;
        case 'n':
          coords[0] = center_x;
          coords[1] = top_y;
          break;
        case 'ne':
          coords[0] = right_x;
          coords[1] = top_y;
          break;
        case 'nw':
          coords[0] = left_x;
          coords[1] = top_y;
          break;
        case 'e':
          coords[0] = left_x;
          coords[1] = center_y;
          break;
        case 'w':
          coords[0] = right_x;
          coords[1] = center_y;
          break;
        case 's':
          coords[0] = center_x;
          coords[1] = bottom_y;
          break;
        case 'se':
          coords[0] = left_x;
          coords[1] = bottom_y;
          break;
        case 'sw':
          coords[0] = right_x;
          coords[1] = bottom_y;
      }
      return this.set_position(coords[0], coords[1]);
    };

    Popup.prototype.best_position_for = function(x, y) {
      var right_edge, x_padding, y_padding;
      x_padding = 40;
      y_padding = -this.container.height() / 2;
      right_edge = x + this.container.width() + x_padding;
      if (right_edge > $(window).width()) {
        x = x - this.container.width() - x_padding;
      } else {
        x += x_padding;
      }
      if (y + y_padding < 0) {
        y = y_padding;
      } else if (y + y_padding > $(window).height()) {
        y = $(window).height() - this.container.height() - y_padding;
      } else {
        y += y_padding;
      }
      return this.set_position(x, y);
    };

    Popup.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      return this.container.trigger(event_name, value);
    };

    Popup.prototype.render_body = function() {
      if (!this.body_template) {
        return;
      }
      this.container.find('.body').empty();
      return this.container.find('.body').html(this.body_template(this.get_view_data()));
    };

    Popup.prototype.render = function() {
      Popup.__super__.render.apply(this, arguments);
      if (!_.isEmpty(this.classes)) {
        this.container.addClass(this.classes.join(''));
      }
      if (this.body_template) {
        return this.render_body();
      }
    };

    return Popup;

  })(RenderedObject);

  World.Popup = Popup;

  FloatingMenu = (function(superClass) {
    extend(FloatingMenu, superClass);

    function FloatingMenu() {
      FloatingMenu.__super__.constructor.apply(this, arguments);
      this.set_items(this.opts.items);
    }

    FloatingMenu.prototype.default_opts = function() {
      return _.extend(FloatingMenu.__super__.default_opts.apply(this, arguments), {
        message: '',
        items: [],
        body_template: '#floating-menu-template'
      });
    };

    FloatingMenu.prototype.get_view_data = function() {
      return _.extend(FloatingMenu.__super__.get_view_data.apply(this, arguments), {
        items: this.items
      });
    };

    FloatingMenu.prototype.set_items = function(new_items) {
      this.items = new_items;
      this.set_view_data('items', this.items);
      this.render(true);
      return this.container.trigger('items_changed');
    };

    FloatingMenu.prototype.setup_events = function() {
      FloatingMenu.__super__.setup_events.apply(this, arguments);
      this.container.on('item_selected', (function(_this) {
        return function(e, value) {
          return _this.item_selected(value);
        };
      })(this));
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          $el = $(e.target);
          if ($el.is('.btn')) {
            return _this.trigger('item_selected', $el.data('action'));
          }
        };
      })(this));
    };

    FloatingMenu.prototype.item_selected = function(value) {
      switch (value) {
        case 'close':
          return this.close();
      }
    };

    return FloatingMenu;

  })(Popup);

  World.FloatingMenu = FloatingMenu;

  Confirm = (function(superClass) {
    extend(Confirm, superClass);

    function Confirm() {
      Confirm.__super__.constructor.apply(this, arguments);
      this.message = this.opts.message;
      this.is_html = this.opts.is_html;
    }

    Confirm.prototype.default_opts = function() {
      return _.extend(Confirm.__super__.default_opts.apply(this, arguments), {
        title: 'Are you sure?',
        items: {
          yes: 'Ok',
          no: 'Cancel'
        },
        open: true
      });
    };

    Confirm.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === 'item_selected') {
        switch (value) {
          case 'yes':
            this.confirm();
            break;
          case 'no':
            this.cancel();
        }
        return this.destroy();
      }
    };

    Confirm.prototype.confirm = function() {
      return this.container.trigger('confirm');
    };

    Confirm.prototype.cancel = function() {
      return this.container.trigger('cancel');
    };

    return Confirm;

  })(FloatingMenu);

  World.Confirm = Confirm;

  BuildMenu = (function(superClass) {
    extend(BuildMenu, superClass);

    function BuildMenu() {
      BuildMenu.__super__.constructor.apply(this, arguments);
      this.block_id = this.opts.block_id;
      this.street_id = this.opts.street_id;
      this.town = this.opts.town;
    }

    BuildMenu.prototype.default_opts = function() {
      return _.extend(BuildMenu.__super__.default_opts.apply(this, arguments), {
        block_id: -1,
        street_id: -1,
        town: null,
        title: 'Build Menu',
        items: {
          build_construction_office: "Build Construction Office",
          build_farm: "Build Farm",
          build_factory: "Build Factory",
          build_housing: "Build Housing",
          build_warehoue: "Build Warehouse"
        }
      });
    };

    BuildMenu.prototype.trigger = function(event_name, value) {
      var build_what, result;
      if (event_name == null) {
        event_name = 'item_selected';
      }
      BuildMenu.__super__.trigger.apply(this, arguments);
      if (this.town && event_name === 'item_selected') {
        build_what = value.substring(value.indexOf("_") + 1);
        result = this.town.build_structure(build_what, this.street_id, this.block_id);
        return this.destroy();
      }
    };

    return BuildMenu;

  })(FloatingMenu);

  FluxMenu = (function(superClass) {
    extend(FluxMenu, superClass);

    function FluxMenu() {
      FluxMenu.__super__.constructor.apply(this, arguments);
      this.clock = this.opts.clock;
      this.set_position(10, 10);
    }

    FluxMenu.prototype.default_opts = function() {
      return _.extend(FluxMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Flux Menu',
        clock: new WorldClock(),
        items: {
          pause_time: 'Pause Time',
          resume_time: 'Resume Time',
          speed_up_time: 'Speed up Time',
          slow_down_time: 'Slow Down Time',
          default_time: 'Reset Time Speed',
          add_one_hour: 'Add 1 Hour'
        }
      });
    };

    FluxMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === 'item_selected') {
        switch (value) {
          case 'pause_time':
            return this.pause_time();
          case 'resume_time':
            return this.resume_time();
          case 'speed_up_time':
            return this.speed_up_time();
          case 'slow_down_time':
            return this.slow_down_time();
          case 'default_time':
            return this.default_time();
          case 'add_one_hour':
            return this.add_one_hour();
        }
      }
    };

    FluxMenu.prototype.add_one_hour = function() {
      var ref;
      return (ref = this.clock) != null ? ref.add_time(1, 'hours') : void 0;
    };

    FluxMenu.prototype.pause_time = function() {
      var ref;
      return (ref = this.clock) != null ? ref.pause_time() : void 0;
    };

    FluxMenu.prototype.resume_time = function() {
      var ref;
      return (ref = this.clock) != null ? ref.resume_time() : void 0;
    };

    FluxMenu.prototype.speed_up_time = function() {
      var ref;
      return (ref = this.clock) != null ? ref.time_speed_plus() : void 0;
    };

    FluxMenu.prototype.slow_down_time = function() {
      var ref;
      return (ref = this.clock) != null ? ref.time_speed_minus() : void 0;
    };

    FluxMenu.prototype.default_time = function() {
      var ref;
      return (ref = this.clock) != null ? ref.time_speed_default() : void 0;
    };

    return FluxMenu;

  })(FloatingMenu);

  World.FluxMenu = FluxMenu;

  ResidentMenu = (function(superClass) {
    extend(ResidentMenu, superClass);

    function ResidentMenu() {
      ResidentMenu.__super__.constructor.apply(this, arguments);
      this.resident = this.opts.resident;
      this.set_title(this.resident.name);
      this.available_jobs = this.opts.available_jobs;
      this.job_ids_to_index = {};
      this.view_data = this.get_view_data();
      this.render(true);
      this.jobs_menu = null;
      this.setup_jobs_menu();
    }

    ResidentMenu.prototype.destroy = function() {
      if (this.jobs_menu) {
        this.jobs_menu.destroy();
      }
      return ResidentMenu.__super__.destroy.apply(this, arguments);
    };

    ResidentMenu.prototype.default_opts = function() {
      return _.extend(ResidentMenu.__super__.default_opts.apply(this, arguments), {
        resident: null,
        items: {
          show_stats: 'Show Stats',
          assign_job: 'Assign Job',
          evict: 'Evict'
        },
        available_jobs: []
      });
    };

    ResidentMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === "item_selected") {
        switch (value) {
          case 'show_stats':
            return this.show_stats();
          case 'assign_job':
            return this.assign_job();
          case 'evict':
            return this.evict();
        }
      }
    };

    ResidentMenu.prototype.setup_jobs_menu = function() {
      var i, j, job, job_items, len, ref;
      job_items = {};
      ref = this.available_jobs;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        job = ref[i];
        job_items[job.id] = job.name;
        this.job_ids_to_index[job.id] = i;
      }
      this.jobs_menu = new SelectJobMenu(null, {
        items: job_items
      });
      return this.jobs_menu.container.on('item_selected', (function(_this) {
        return function(e, value) {
          var job_id;
          job_id = parseInt(value);
          if (_.has(_this.job_ids_to_index, job_id)) {
            job = _this.available_jobs[_this.job_ids_to_index[job_id]];
            job.employ_resident(_this.resident);
          }
          return _this.destroy();
        };
      })(this));
    };

    ResidentMenu.prototype.show_stats = function() {};

    ResidentMenu.prototype.assign_job = function() {
      return this.jobs_menu.open();
    };

    ResidentMenu.prototype.evict = function() {};

    return ResidentMenu;

  })(FloatingMenu);

  SelectCropMenu = (function(superClass) {
    extend(SelectCropMenu, superClass);

    function SelectCropMenu() {
      SelectCropMenu.__super__.constructor.apply(this, arguments);
      this.crops = this.opts.crops;
      this.view_data = this.get_view_data();
      this.render(true);
    }

    SelectCropMenu.prototype.default_opts = function() {
      return _.extend(SelectCropMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Select Crop',
        items: []
      });
    };

    SelectCropMenu.prototype.trigger = function() {
      SelectCropMenu.__super__.trigger.apply(this, arguments);
      return this.destroy();
    };

    return SelectCropMenu;

  })(FloatingMenu);

  SelectHouseMenu = (function(superClass) {
    extend(SelectHouseMenu, superClass);

    function SelectHouseMenu() {
      SelectHouseMenu.__super__.constructor.apply(this, arguments);
      this.housing = this.opts.housing;
      this.setup_items();
    }

    SelectHouseMenu.prototype.setup_items = function() {
      var house, j, len, ref;
      if (!this.housing) {
        return;
      }
      this.items = {};
      ref = this.housing;
      for (j = 0, len = ref.length; j < len; j++) {
        house = ref[j];
        this.items["house_" + house.id] = house.name;
      }
      return this.render(true);
    };

    SelectHouseMenu.prototype.default_opts = function() {
      return _.extend(SelectHouseMenu.__super__.default_opts.apply(this, arguments), {
        title: 'Select Home',
        housing: []
      });
    };

    SelectHouseMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (value == null) {
        value = null;
      }
      SelectHouseMenu.__super__.trigger.apply(this, arguments);
      if (event_name === 'item_selected') {
        this.trigger('house_selected', value);
      }
      return this.destroy();
    };

    return SelectHouseMenu;

  })(FloatingMenu);

  VisitorMenu = (function(superClass) {
    extend(VisitorMenu, superClass);

    function VisitorMenu() {
      VisitorMenu.__super__.constructor.apply(this, arguments);
      this.visitor = this.opts.visitor;
      this.town = this.opts.town;
      this.housing = this.town.get_housing();
      this.setup_house_menu();
    }

    VisitorMenu.prototype.default_opts = function() {
      return _.extend(VisitorMenu.__super__.default_opts.apply(this, arguments), {
        visitor: null,
        town: null,
        title: 'Visitor Actions',
        items: {
          move_in: "Move In",
          kick_out: "Kick Out"
        }
      });
    };

    VisitorMenu.prototype.setup_house_menu = function() {
      return this.select_house_menu = new SelectHouseMenu(null, {
        housing: this.housing
      });
    };

    VisitorMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (value == null) {
        value = null;
      }
      VisitorMenu.__super__.trigger.apply(this, arguments);
      if (event_name === 'item_selected') {
        switch (value) {
          case 'move_in':
            this.move_in_to_town();
            break;
          case 'kick_out':
            this.kick_out_of_town();
        }
      }
      return this.destroy();
    };

    VisitorMenu.prototype.move_in_to_town = function() {
      if (!(this.town && this.visitor)) {
        return;
      }
      this.select_house_menu.open();
      return this.select_house_menu.container.one('house_selected', (function(_this) {
        return function(e, house_id) {
          var house, j, len, ref, results1;
          house_id = parseInt(house_id.replace("house_", ""));
          ref = _this.housing;
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            house = ref[j];
            if (house.id === house_id) {
              _this.town.convert_visitor_to_resident(_this.visitor.id);
              results1.push(house.move_resident_in(_this.visitor));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        };
      })(this));
    };

    VisitorMenu.prototype.kick_out_of_town = function() {
      if (!(this.town && this.visitor)) {
        return;
      }
      return this.town.remove_visitor(this.visitor.id);
    };

    return VisitorMenu;

  })(FloatingMenu);

  SelectJobMenu = (function(superClass) {
    extend(SelectJobMenu, superClass);

    function SelectJobMenu() {
      SelectJobMenu.__super__.constructor.apply(this, arguments);
      this.resident = this.opts.resident;
      this.jobs = this.opts.jobs;
    }

    SelectJobMenu.prototype.default_opts = function() {
      return _.extend(SelectJobMenu.__super__.default_opts.apply(this, arguments), {
        name: 'Select Job',
        jobs: null,
        resident: null
      });
    };

    return SelectJobMenu;

  })(FloatingMenu);

  HireWorkersMenu = (function(superClass) {
    extend(HireWorkersMenu, superClass);

    HireWorkersMenu.outsource_hire_cost = 45;

    function HireWorkersMenu() {
      HireWorkersMenu.__super__.constructor.apply(this, arguments);
      this.workers = this.opts.workers;
      this.job = this.opts.job;
      this.funds_available = this.opts.funds_available;
      this.setup_items();
    }

    HireWorkersMenu.prototype.setup_items = function() {
      var items, j, len, ref, w;
      items = {};
      if (this.workers.length) {
        ref = this.workers;
        for (j = 0, len = ref.length; j < len; j++) {
          w = ref[j];
          items[w.id] = w.name;
        }
      } else {
        items["outsource_hire"] = "Outsource Hire $" + HireWorkersMenu.outsource_hire_cost;
      }
      return this.set_items(items);
    };

    HireWorkersMenu.prototype.default_opts = function() {
      return _.extend(HireWorkersMenu.__super__.default_opts.apply(this, arguments), {
        title: "Hire Workers",
        workers: [],
        job: null
      });
    };

    HireWorkersMenu.prototype.trigger = function(event_name, value) {
      if (event_name == null) {
        event_name = 'item_selected';
      }
      if (event_name === 'item_selected') {
        if (value === "outsource_hire") {
          return this.outsource_hire();
        } else {
          return this.assign_worker_to_job(parseInt(value));
        }
      }
    };

    HireWorkersMenu.prototype.assign_worker_to_job = function(worker_id) {
      var j, len, ref, w, worker;
      if (!this.job) {
        return;
      }
      worker = null;
      ref = this.workers;
      for (j = 0, len = ref.length; j < len; j++) {
        w = ref[j];
        if (w.id = worker_id) {
          worker = w;
        }
      }
      if (!worker) {
        return;
      }
      this.job.employ_resident(worker);
      return this.destroy();
    };

    HireWorkersMenu.prototype.outsource_hire = function() {
      if (!(this.funds_available - HireWorkersMenu.outsource_hire_cost > 0)) {
        return;
      }
      this.container.trigger("hire:outsource_hire", HireWorkersMenu.outsource_hire_cost);
      return this.destroy();
    };

    HireWorkersMenu.prototype.render = function() {
      if (this.items != null) {
        this.message = _.isEmpty(this.items) ? 'No Workers Available' : '';
      }
      return HireWorkersMenu.__super__.render.apply(this, arguments);
    };

    return HireWorkersMenu;

  })(FloatingMenu);

  StructureMenu = (function(superClass) {
    extend(StructureMenu, superClass);

    function StructureMenu() {
      return StructureMenu.__super__.constructor.apply(this, arguments);
    }

    return StructureMenu;

  })(FloatingMenu);

  Alert = (function() {
    function Alert(message, type1) {
      this.message = message != null ? message : '';
      this.type = type1 != null ? type1 : 'status';
      this.tmpl = _.template($('#alert-template').html());
      this.dismissed = false;
      this.render();
      this.setup_events();
      this;
    }

    Alert.prototype.delayed_dismiss = function(millis) {
      if (millis == null) {
        millis = 3000;
      }
      return setTimeout((function(_this) {
        return function() {
          return _this.dismiss();
        };
      })(this), millis);
    };

    Alert.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          e.preventDefault();
          $el = $(e.target);
          switch ($el.data('action')) {
            case 'dismiss':
              return _this.dismiss();
          }
        };
      })(this));
    };

    Alert.prototype.dismiss = function() {
      if (this.dismissed) {
        return;
      }
      this.dismissed = true;
      return this.container.fadeOut(function() {
        return $(this).remove();
      });
    };

    Alert.prototype.show = function() {
      return this.container.fadeIn();
    };

    Alert.prototype.render = function() {
      var $alert, data;
      data = {
        message: this.message,
        type: this.type
      };
      $alert = $(this.tmpl(data));
      this.container = $alert;
      $('body').append(this.container);
      return this.show();
    };

    return Alert;

  })();

  World.Alert = Alert;

  ErrorAlert = (function(superClass) {
    extend(ErrorAlert, superClass);

    function ErrorAlert(message, type1) {
      this.message = message != null ? message : '';
      this.type = type1 != null ? type1 : 'error';
      ErrorAlert.__super__.constructor.call(this, this.message, this.type);
      setTimeout((function(_this) {
        return function() {
          return _this.dismiss();
        };
      })(this), 1000 * 30);
    }

    return ErrorAlert;

  })(Alert);

  World.Alert.Error = ErrorAlert;

  FundsNotAvailableAlert = (function(superClass) {
    extend(FundsNotAvailableAlert, superClass);

    function FundsNotAvailableAlert(message) {
      this.message = message != null ? message : 'Funds not available';
      FundsNotAvailableAlert.__super__.constructor.call(this, this.message);
    }

    return FundsNotAvailableAlert;

  })(ErrorAlert);

  HUD = (function(superClass) {
    extend(HUD, superClass);

    function HUD() {
      return HUD.__super__.constructor.apply(this, arguments);
    }

    HUD.prototype.template_id = function() {
      return '#hud-template';
    };

    HUD.prototype.update = function(view_data) {
      this.view_data = view_data != null ? view_data : {};
    };

    HUD.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          e.preventDefault();
          $el = $(e.target);
          if ($el.is('.btn')) {
            return _this.container.trigger('btn_pressed', $el.data('action'));
          }
        };
      })(this));
    };

    HUD.prototype.render = function() {
      var $speedx, fill_values, key, results1, val;
      HUD.__super__.render.apply(this, arguments);
      fill_values = {
        calendar_month: this.view_data.clock.get_month(),
        calendar_year: this.view_data.clock.get_year(),
        calendar_day: this.view_data.clock.get_day(),
        calendar_day_in_month: this.view_data.clock.get_day_in_month(),
        clock_time: this.view_data.clock.get_time('h:m'),
        time_speedx: this.view_data.clock.time_speedx,
        balance: this.view_data.town.balance,
        occupancy_percent: Math.round(this.view_data.town.occupancy_percent * 100),
        weather_season: this.view_data.weather.current_season(),
        weather_conditions: this.view_data.weather.state.current(),
        sun_is_up: !this.view_data.clock.is_night() ? "up" : "down"
      };
      $(".town").toggleClass("sun_is_down", !fill_values.sun_is_up);
      results1 = [];
      for (key in fill_values) {
        val = fill_values[key];
        this.container.find("[data-fill=" + key + "]").text(val);
        $speedx = this.container.find("[data-fill=time_speedx]");
        if (fill_values.time_speedx === 1) {
          results1.push($speedx.hide());
        } else {
          results1.push($speedx.show().text("(" + fill_values.time_speedx + "x)"));
        }
      }
      return results1;
    };

    return HUD;

  })(RenderedObject);

  StateManager = (function() {
    function StateManager(state, duration, queue_state) {
      if (state == null) {
        state = '';
      }
      if (duration == null) {
        duration = 0;
      }
      if (queue_state == null) {
        queue_state = '';
      }
      this.default_state = state;
      this.current_state = state;
      this.next_state = '';
      this.previous_state = '';
      this.state_changed_at = 0;
      this.time_since_change = 0;
      this.duration = duration;
      this.ticks = 0;
      this.queued_state = queue_state;
      this.bindings = {};
      this.history = [];
    }

    StateManager.prototype.time_since_state_change = function() {
      return this.time_since_change;
    };

    StateManager.prototype.current = function() {
      return this.current_state;
    };

    StateManager.prototype.on = function(event_name, fn, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      if (!_.has(this.bindings, event_name) || overwrite) {
        this.bindings[event_name] = [];
      }
      return this.bindings[event_name].push(fn);
    };

    StateManager.prototype.off = function(event_name, fn, destroy_all) {
      var func, i, j, len, ref, results1;
      if (destroy_all == null) {
        destroy_all = false;
      }
      if (_.has(this.bindings, event_name)) {
        if (destroy_all) {
          return delete this.bindings[event_name];
        } else {
          ref = this.bindings[event_name];
          results1 = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            func = ref[i];
            if (func.toString() === fn.toString()) {
              results1.push(delete this.bindings[event_name][i]);
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }
      }
    };

    StateManager.prototype.trigger = function(event_name, data) {
      var fn, j, len, ref, results1;
      if (data == null) {
        data = null;
      }
      if (!_.has(this.bindings, event_name)) {
        return;
      }
      ref = this.bindings[event_name];
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        fn = ref[j];
        results1.push(fn != null ? fn.apply(this, data) : void 0);
      }
      return results1;
    };

    StateManager.prototype.queue_state = function(state, change_in) {
      if (state == null) {
        state = '';
      }
      if (change_in == null) {
        change_in = 0;
      }
      this.queued_state = state;
      if (change_in > 0) {
        this.duration = change_in;
        return this.ticks = 0;
      }
    };

    StateManager.prototype.change_state = function(new_state, duration, queue_state) {
      if (new_state == null) {
        new_state = '';
      }
      if (duration == null) {
        duration = 0;
      }
      if (queue_state == null) {
        queue_state = '';
      }
      if (new_state === this.current_state) {
        return;
      }
      this.next_state = new_state;
      this.record_history('next');
      if (duration > 0) {
        return this.queue_state(queue_state, duration);
      }
    };

    StateManager.prototype.record_history = function(type) {
      if (type == null) {
        type = 'changed';
      }
      switch (type) {
        case 'changed':
          return this.history.push({
            the_time: (new Date()).getTime(),
            current_state: this.current_state,
            previous_state: this.previous_state
          });
        case 'next':
          return this.history.push({
            the_time: (new Date()).getTime(),
            current_state: this.current_state,
            next_state: this.next_state
          });
      }
    };

    StateManager.prototype.update = function(clock) {
      if (clock == null) {
        clock = null;
      }
      this.ticks += 1;
      if (clock) {
        this.time_since_change = clock.now() - this.state_changed_at;
      }
      if (this.duration && this.ticks > this.duration && !_.isEmpty(this.queued_state)) {
        this.change_state(this.queued_state);
        this.queued_state = '';
        this.duration = 0;
      }
      if (_.isEmpty(this.next_state)) {
        return;
      }
      this.previous_state = this.current_state;
      this.current_state = this.next_state;
      this.next_state = '';
      if (clock) {
        this.state_changed_at = clock.now();
      }
      this.trigger('state_changed', [this.current_state, this.previous_state]);
      return this.record_history('changed');
    };

    return StateManager;

  })();

  Town = (function(superClass) {
    extend(Town, superClass);

    Town.costs = {
      street: 100
    };

    Town.extra_visitors = true;

    Town.visitor_chance = Town.extra_visitors ? .15 : .05;

    Town.no_visitors_at_night = false;

    Town.night_farming = true;

    Town.max_visitors = 12;

    Town.prototype.default_opts = function() {
      return _.extend(Town.__super__.default_opts.apply(this, arguments), {
        balance: 0
      });
    };

    function Town() {
      Town.__super__.constructor.apply(this, arguments);
      this.street_tmpl = _.template($('#street-template').html());
      this.location = [0, 0];
      this.time = 0;
      this.day = 0;
      this.year = 0;
      this.balance = this.opts.balance;
      this.spent = 0;
      this.occupancy_percent = 0;
      this.is_night = false;
      this.next_street_id = 0;
      this.next_resident_id = 0;
      this.streets = [];
      this.street_ids_to_index = {};
      this.residents = [];
      this.resident_ids_to_index = {};
      this.visitors = [];
      this.selected_visitor = 0;
      this.blocks = [];
      this.block_ids_to_index = {};
      this.structures = [];
      this.structure_ids_to_index = {};
      this.structures_by_type = {};
    }

    Town.prototype.template_id = function() {
      return '#town-template';
    };

    Town.prototype.render = function() {
      Town.__super__.render.apply(this, arguments);
      this.render_streets();
      return this.render_visitors();
    };

    Town.prototype.update = function(clock) {
      var j, k, len, len1, r, ref, ref1, s;
      this.is_night = clock.is_night();
      ref = this.streets;
      for (j = 0, len = ref.length; j < len; j++) {
        s = ref[j];
        s.update(clock);
      }
      ref1 = this.residents;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        r = ref1[k];
        r.update(clock);
      }
      this.get_occupancy_percent();
      return this.update_visitors(clock);
    };

    Town.prototype.get_view_data = function() {
      return {
        is_night: this.is_night
      };
    };

    Town.prototype.update_visitors = function(clock) {
      var alter_chance, die_roll, visitor_chance;
      if (!this.meets_minimum_reqs_for_visitors()) {
        return;
      }
      alter_chance = 1;
      if (this.visitors.length >= Town.max_visitors) {
        alter_chance = -1;
      } else if (this.is_night) {
        if (Town.no_visitors_at_night) {
          alter_chance = -1;
        } else {
          alter_chance = .5;
        }
      } else if (clock.is_afternoon()) {
        alter_chance += .05;
      }
      if (this.occupancy_percent < .2) {
        alter_chance += .1;
      } else if (this.occupancy_percent > .85) {
        alter_chance -= .1;
      }
      visitor_chance = alter_chance ? Town.visitor_chance * alter_chance : Town.visitor_chance;
      die_roll = Math.random() * 100;
      if (die_roll < visitor_chance * 80) {
        return this.create_visitor();
      }
    };

    Town.prototype.meets_minimum_reqs_for_visitors = function() {
      var num_construction_offices, num_housing, reqs_met;
      reqs_met = false;
      num_construction_offices = this.num_structures_in_town("construction_office");
      num_housing = this.num_structures_in_town("housing");
      reqs_met = num_construction_offices > 0 && num_housing > 0;
      return reqs_met;
    };

    Town.prototype.num_structures_in_town = function(only_type) {
      var count, j, len, ref, street;
      if (only_type == null) {
        only_type = false;
      }
      count = 0;
      ref = this.streets;
      for (j = 0, len = ref.length; j < len; j++) {
        street = ref[j];
        count += street.num_structures_on_street(only_type);
      }
      return count;
    };

    Town.prototype.get_structures = function(only_type) {
      var j, k, len, len1, ref, s, street, structs, structures;
      if (only_type == null) {
        only_type = false;
      }
      structures = [];
      ref = this.streets;
      for (j = 0, len = ref.length; j < len; j++) {
        street = ref[j];
        structs = street.get_structures(only_type);
        if (!_.isEmpty(structs)) {
          for (k = 0, len1 = structs.length; k < len1; k++) {
            s = structs[k];
            structures.push(s);
          }
        }
      }
      return structures;
    };

    Town.prototype.find_housing_with_vacancy = function(amount) {
      var h, housing, housing_with_vacancy;
      if (amount == null) {
        amount = -1;
      }
      housing = this.get_structures("housing");
      housing_with_vacancy = (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = housing.length; j < len; j++) {
          h = housing[j];
          if (h.has_vacancy()) {
            results1.push(h);
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })();
      if (amount < 0) {
        return housing;
      } else if (amount === 1) {
        return housing[0];
      } else {
        return _.first(housing, amount);
      }
    };

    Town.prototype._street_id = function() {
      return this.next_street_id += 1;
    };

    Town.prototype._street_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._street_id(),
        name: 'One Street'
      }, props);
    };

    Town.prototype.create_street = function(props) {
      var $new_street, new_street;
      if (props == null) {
        props = {};
      }
      if (!this.funds_available(Town.costs.street)) {
        new FundsNotAvailableAlert();
        console.error('Funds not available');
        return false;
      }
      this.spend_funds(Town.costs.street);
      props = this._street_props(props);
      $new_street = $(this.street_tmpl({
        id: props.id,
        editable: false
      }));
      this.container.find('.streets').append($new_street);
      new_street = new Street(this.container.find(".street[data-id=" + props.id + "]"), props);
      this.streets.push(new_street);
      return this.street_ids_to_index[new_street.id] = this.streets.length - 1;
    };

    Town.prototype.create_block = function(street_id, props) {
      var excavation_cost, new_block, street, street_idx;
      if (props == null) {
        props = {};
      }
      street_idx = this.street_ids_to_index[street_id];
      street = this.streets[street_idx];
      if (!street) {
        return;
      }
      excavation_cost = Block.get_structure_cost("excavation");
      if (!this.funds_available(excavation_cost)) {
        new FundsNotAvailableAlert();
        return console.error('Funds not available');
      }
      this.spend_funds(excavation_cost);
      new_block = street.create_block(props);
      this.blocks.push(new_block);
      return this.block_ids_to_index[new_block.id] = this.blocks.length - 1;
    };

    Town.prototype._resident_id = function() {
      return this.next_resident_id += 1;
    };

    Town.prototype._resident_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._resident_id(),
        name: 'Mr Resident'
      }, props);
    };

    Town.prototype.get_visitor = function(id, is_id) {
      var j, len, ref, v;
      if (id == null) {
        id = 0;
      }
      if (is_id == null) {
        is_id = false;
      }
      if (is_id) {
        ref = this.visitors;
        for (j = 0, len = ref.length; j < len; j++) {
          v = ref[j];
          if (v.id === id) {
            return v;
          }
        }
      } else {
        if (_.has(this.visitors, id)) {
          return this.visitors[id];
        } else {
          return false;
        }
      }
    };

    Town.prototype.create_visitor = function(props) {
      var new_resident;
      if (props == null) {
        props = {};
      }
      props = this._resident_props(props);
      new_resident = new Resident(null, props);
      this.visitors.push(new_resident);
      return new_resident;
    };

    Town.prototype.remove_visitor = function(id) {
      var j, len, ref, v, visitors_cleaned;
      visitors_cleaned = [];
      ref = this.visitors;
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        if (v.id !== id) {
          visitors_cleaned.push(v);
        }
      }
      return this.visitors = visitors_cleaned;
    };

    Town.prototype.convert_visitor_to_resident = function(visitor_id) {
      var visitor;
      visitor = this.get_visitor(visitor_id, true);
      if (!visitor) {
        return;
      }
      this.residents.push(visitor);
      this.resident_ids_to_index[visitor.id] = this.residents.length - 1;
      this.remove_visitor(visitor_id);
      return visitor;
    };

    Town.prototype.get_resident = function(id) {
      if (!_.has(this.resident_ids_to_index, id)) {
        console.error('resident ID not found');
        return false;
      }
      return this.residents[this.resident_ids_to_index[id]];
    };

    Town.prototype.render_streets = function() {
      var j, len, ref, results1, s;
      ref = this.streets;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        s = ref[j];
        results1.push(s.render());
      }
      return results1;
    };

    Town.prototype.render_visitors = function() {
      var $visitors, visitors_tmpl;
      $visitors = this.container.find('.visitors');
      if (!this.visitors.length) {
        $visitors.hide();
        return;
      } else if (!$visitors.is(':visible')) {
        $visitors.show();
      }
      visitors_tmpl = _.template($('#visitors-template').html());
      $visitors.empty();
      return $visitors.html(visitors_tmpl({
        visitors: this.visitors,
        selected_visitor: this.selected_visitor
      }));
    };

    Town.prototype.add_funds = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      return this.balance += how_much;
    };

    Town.prototype.spend_funds = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      this.spent += how_much;
      return this.balance -= how_much;
    };

    Town.prototype.funds_available = function(how_much) {
      if (how_much == null) {
        how_much = 0;
      }
      return (this.balance - how_much) >= 0;
    };

    Town.prototype.get_occupancy_percent = function() {
      var idx, j, len, ref, structure_ids, total;
      if (!_.has(this.structures_by_type, 'housing')) {
        return;
      }
      structure_ids = this.structures_by_type['housing'];
      total = 0;
      for (j = 0, len = structure_ids.length; j < len; j++) {
        idx = structure_ids[j];
        total += (ref = this.structures[idx]) != null ? ref.occupancy_percent() : void 0;
      }
      return this.occupancy_percent = total / structure_ids.length;
    };

    Town.prototype.build_structure = function(type, street_id, block_id) {
      var block_cost, new_structure;
      if (_.indexOf(Block.allowed_structures, type) < 0) {
        return console.error('Bad type');
      }
      block_cost = Block.get_structure_cost(type);
      if (!this.funds_available(block_cost)) {
        new FundsNotAvailableAlert();
        return console.error('Funds not available');
      }
      this.spend_funds(block_cost);
      street_id = this.street_ids_to_index[street_id];
      if (!_.has(this.streets, street_id)) {
        return;
      }
      new_structure = this.streets[street_id].build_structure(type, block_id);
      if (!new_structure) {
        return console.error('Error creating structure');
      }
      this.structures.push(new_structure);
      this.structure_ids_to_index[new_structure.id] = this.structures.length - 1;
      if (!_.has(this.structures_by_type, type)) {
        this.structures_by_type[type] = [];
      }
      this.structures_by_type[type].push(this.structures.length - 1);
      return new_structure;
    };

    Town.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el, build_menu, hire_workers_menu, resident, resident_menu, structure, structure_id, visitor_menu, warehouse;
          e.preventDefault();
          $el = $(e.target);
          switch ($el.data('action')) {
            case 'build_structure':
              return _this.build_structure($el.data('value'), $el.closest('.street').data('id'), $el.closest('.block').data('id'));
            case 'add_block':
              return _this.create_block($el.closest('.street').data('id'));
            case 'launch_build_menu':
              build_menu = new BuildMenu(null, {
                block_id: $el.closest('.block').data('id'),
                street_id: $el.closest('.street').data('id'),
                town: _this,
                open: true
              });
              build_menu.best_position_for(e.clientX, e.clientY);
              return build_menu.container.one('item_selected', function(e, selection) {
                return $el.hide();
              });
            case 'launch_visitor_menu':
              $el.addClass('active');
              _this.selected_visitor = $el.data('index');
              visitor_menu = new VisitorMenu(null, {
                town: _this,
                visitor: _this.get_visitor($el.data('index'), false),
                open: true
              });
              visitor_menu.best_position_for(e.clientX, e.clientY);
              return visitor_menu.container.one('destroy', function() {
                return _this.selected_visitor = null;
              });
            case 'launch_resident_menu':
              resident = _this.get_resident($el.data('id'));
              return resident_menu = new ResidentMenu(null, {
                resident: resident,
                available_jobs: _this.get_available_jobs(),
                open: true
              });
            case 'launch_hire_workers_menu':
              structure_id = $el.data('structure-id');
              if (_.has(_this.structure_ids_to_index, structure_id)) {
                structure = _this.get_structure(structure_id);
                if (structure) {
                  hire_workers_menu = new HireWorkersMenu(null, {
                    job: structure,
                    workers: _this.get_available_workers(),
                    open: true,
                    position_for: [e.clientX, e.clientY],
                    funds_available: _this.balance
                  });
                  return hire_workers_menu.container.one("hire:outsource_hire", function(e, cost) {
                    return _this.outsource_hire(cost, hire_workers_menu.job);
                  });
                }
              }
              break;
            case 'request_warehouse_pickup':
              structure_id = $el.closest('.structure').data('id');
              structure = _this.get_structure(structure_id);
              console.log("request warehouse pickup", structure, _.has(_this.structures_by_type, 'warehouse'));
              if (structure && _.has(_this.structures_by_type, 'warehouse')) {
                warehouse = _this.structures[_.first(_this.structures_by_type['warehouse'])];
                return warehouse.queue_pickup(structure);
              }
          }
        };
      })(this));
    };

    Town.prototype.get_structure = function(id) {
      if (!_.has(this.structure_ids_to_index, id)) {
        return false;
      }
      return this.structures[this.structure_ids_to_index[id]];
    };

    Town.prototype.get_housing = function(only_vacant) {
      var h, housing, j, len, results, s;
      if (only_vacant == null) {
        only_vacant = false;
      }
      if (!_.has(this.structures_by_type, 'housing')) {
        return;
      }
      housing = this.structures_by_type['housing'];
      results = [];
      for (j = 0, len = housing.length; j < len; j++) {
        h = housing[j];
        s = this.structures[h];
        if (!only_vacant || s.has_vacancy()) {
          results.push(s);
        }
      }
      return results;
    };

    Town.prototype.get_available_jobs = function() {
      var j, jobs, len, ref, s;
      jobs = [];
      ref = this.structures;
      for (j = 0, len = ref.length; j < len; j++) {
        s = ref[j];
        if (s.has_jobs_available()) {
          jobs.push(s);
        }
      }
      return jobs;
    };

    Town.prototype.get_available_workers = function() {
      var j, len, r, ref, workers;
      workers = [];
      ref = this.residents;
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        if (!r.is_employed()) {
          workers.push(r);
        }
      }
      return workers;
    };

    Town.prototype.get_vacant_blocks = function() {
      var block, j, k, len, len1, ref, ref1, street, vacancies;
      vacancies = [];
      ref = this.streets;
      for (j = 0, len = ref.length; j < len; j++) {
        street = ref[j];
        ref1 = street.blocks;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          block = ref1[k];
          if (block.is_vacant()) {
            vacancies.push([street.id, block.id]);
          }
        }
      }
      return vacancies;
    };

    Town.prototype.outsource_hire = function(cost, job) {
      var new_home, newhire;
      if (!this.funds_available(cost)) {
        return console.error("not enough funds to outsource hire");
      }
      this.spend_funds(cost);
      newhire = this.create_visitor();
      this.convert_visitor_to_resident(newhire.id);
      new_home = this.find_home();
      new_home.move_resident_in(newhire);
      job.employ_resident(newhire);
      console.log("outsource resident moved in and hired");
      return newhire;
    };

    Town.prototype.build_homeless_camp = function() {
      var vacancies;
      vacancies = this.get_vacant_blocks();
      if (!vacancies.length) {
        console.error("no vacancies!");
      }
      return this.build_structure("homeless_camp", vacancies[0][0], vacancies[0][1]);
    };

    Town.prototype.find_home = function() {
      var chosen_home, homeless_camps, num_housing;
      num_housing = this.num_structures_in_town("housing");
      homeless_camps = this.get_structures("homeless_camp");
      chosen_home = num_housing < 1 ? _.isEmpty(homeless_camps) ? this.build_homeless_camp() : homeless_camps[0] : this.find_housing_with_vacancy(1);
      return chosen_home;
    };

    return Town;

  })(RenderedObject);

  Street = (function(superClass) {
    extend(Street, superClass);

    function Street() {
      Street.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('setup');
      this.block_tmpl = _.template($('#block-template').html());
      this.name = '';
      this.num_blocks = 0;
      this.max_blocks = 6;
      this.next_block_id = 0;
      this.blocks = [];
      this.block_ids_to_index = {};
      this.structures = [];
      this.structure_ids_to_index = {};
    }

    Street.prototype.setup_blocks = function() {
      var i, j, ref;
      for (i = j = 1, ref = this.opts.blocks; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        this.create_block();
      }
      return this.num_blocks = this.blocks.length;
    };

    Street.prototype.render = function() {
      var b, j, len, ref, results1;
      Street.__super__.render.apply(this, arguments);
      ref = this.blocks;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        results1.push(b.render());
      }
      return results1;
    };

    Street.prototype.update = function(clock) {
      var b, j, len, ref;
      switch (this.state.current()) {
        case 'setup':
          this.setup_blocks();
          this.state.change_state('running');
          break;
        case 'running':
          ref = this.blocks;
          for (j = 0, len = ref.length; j < len; j++) {
            b = ref[j];
            b.update(clock);
          }
      }
      return this.state.update();
    };

    Street.prototype._block_id = function() {
      return this.next_block_id += 1;
    };

    Street.prototype._block_props = function(props) {
      if (props == null) {
        props = {};
      }
      return _.extend({
        id: this._block_id()
      }, props);
    };

    Street.prototype.create_block = function(props) {
      var $new_block, new_block;
      if (props == null) {
        props = {};
      }
      if (!(this.num_blocks < this.max_blocks)) {
        return;
      }
      props = this._block_props(props);
      $new_block = $('<div/>').addClass('block').attr('data-id', props.id);
      this.container.find('.blocks').append($new_block);
      new_block = new Block(this.container.find(".block[data-id=" + props.id + "]"), props);
      this.blocks.push(new_block);
      this.block_ids_to_index[new_block.id] = this.blocks.length - 1;
      return this.num_blocks = this.blocks.length;
    };

    Street.prototype.build_structure = function(type, build_id) {
      var block_idx, new_structure;
      if (!_.has(this.block_ids_to_index, build_id)) {
        throw 'Bad block id';
      }
      block_idx = this.block_ids_to_index[build_id];
      new_structure = this.blocks[block_idx].build_structure(type, new Address(this.id, block_idx));
      this.structures.push(new_structure);
      this.structure_ids_to_index[new_structure.id] = this.structures.length - 1;
      return new_structure;
    };

    Street.prototype.all_structure_types_on_street = function(return_counts) {
      var block, counts_by_type, j, key, len, name1, ref, types, val;
      if (return_counts == null) {
        return_counts = false;
      }
      types = [];
      counts_by_type = {};
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        block = ref[j];
        if (block.structure) {
          if (return_counts) {
            counts_by_type[name1 = block.structure.type] || (counts_by_type[name1] = 0);
            counts_by_type[block.structure.type]++;
          } else {
            types.push(block.structure.type);
          }
        }
      }
      if (return_counts) {
        for (key in counts_by_type) {
          val = counts_by_type[key];
          types.push([key, val]);
        }
      }
      return types;
    };

    Street.prototype.num_structures_on_street = function(only_type) {
      var block, count, j, len, ref;
      if (only_type == null) {
        only_type = false;
      }
      count = 0;
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        block = ref[j];
        if (!block.is_vacant()) {
          if (!only_type || only_type === block.structure.type) {
            count++;
          }
        }
      }
      return count;
    };

    Street.prototype.get_structures = function(only_type) {
      var block, j, len, ref, structures;
      if (only_type == null) {
        only_type = false;
      }
      structures = [];
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        block = ref[j];
        if (!block.is_vacant()) {
          if (!only_type || only_type === block.structure.type) {
            structures.push(block.structure);
          }
        }
      }
      return structures;
    };

    Street.prototype.setup_events = function() {};

    return Street;

  })(RenderedObject);

  Block = (function(superClass) {
    extend(Block, superClass);

    Block.allowed_structures = ["excavation", "housing", "farm", "factory", "warehouse", "construction_office", "homeless_camp"];

    Block.get_structure_cost = function(type) {
      if (type == null) {
        type = "default";
      }
      if (Structure.costs.hasOwnProperty(type)) {
        return Structure.costs[type];
      } else {
        return Structure.costs["default"];
      }
    };

    Block.prototype.template_id = function() {
      return "#block-template";
    };

    function Block() {
      Block.__super__.constructor.apply(this, arguments);
      this.structure = null;
      this.settings_link = this.container.find('[data-action=launch_settings_menu]');
      this.settings_menu = null;
      this.setup_settings_menu();
      this.update();
    }

    Block.prototype.update = function(clock) {
      if (this.structure) {
        return this.structure.update(clock);
      }
    };

    Block.prototype.get_view_data = function() {
      return _.extend(Block.__super__.get_view_data.apply(this, arguments), {
        id: this.id,
        structure: this.structure,
        type: this.type,
        is_vacant: this.is_vacant()
      });
    };

    Block.prototype.render = function() {
      Block.__super__.render.apply(this, arguments);
      this.settings_link = this.container.find('[data-action=launch_settings_menu]');
      if (this.structure !== null) {
        this.structure.render();
        return this.settings_link.text(this.structure.name);
      }
    };

    Block.prototype.is_vacant = function() {
      return this.structure === null;
    };

    Block.prototype.build_structure = function(type, address, additional_opts) {
      var structure_class, structure_opts;
      if (address == null) {
        address = null;
      }
      if (additional_opts == null) {
        additional_opts = {};
      }
      structure_class = (function() {
        switch (type) {
          case 'housing':
            return Structure.Housing;
          case 'farm':
            return Structure.Farm;
          case 'factory':
            return Structure.Factory;
          case 'warehouse':
            return Structure.Warehouse;
          case 'construction_office':
            return Structure.ConstructionOffice;
          case 'homeless_camp':
            return Structure.HomelessCamp;
          default:
            return null;
        }
      })();
      if (structure_class === null) {
        return console.error("failed to find class for " + type);
      }
      structure_opts = _.extend({
        address: address
      }, additional_opts);
      this.structure = new structure_class(this.container.find(".structure"), structure_opts);
      this.container.find('.build_actions').remove();
      this.settings_link.text(this.structure.name);
      this.container.find('.structure').data('id', this.structure.id).show();
      this.setup_settings_menu();
      this.container.find(".build_btn").hide();
      this.type = type;
      return this.structure;
    };

    Block.prototype.settings_menu_items = function() {
      return {
        close: 'Close'
      };
    };

    Block.prototype.setup_settings_menu = function() {
      if (this.settings_menu) {
        this.settings_menu.destroy();
      }
      this.settings_menu = new StructureMenu(null, {
        title: this.structure ? this.structure.name : "Block " + this.id,
        items: this.settings_menu_items()
      });
      return this.settings_menu.container.on('item_selected', (function(_this) {
        return function(e, value) {
          return _this.settings_item_selected(value);
        };
      })(this));
    };

    Block.prototype.launch_settings_menu = function() {
      if (this.structure) {
        return this.structure.open_settings_menu();
      }
      if (!this.settings_menu) {
        this.setup_settings_menu();
      }
      return this.settings_menu.open();
    };

    Block.prototype.settings_item_selected = function(name) {
      if (this.structure) {
        this.structure.settings_item_selected(name);
      }
      switch (name) {
        case 'close':
          return this.settings_menu.close();
      }
    };

    Block.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          e.preventDefault();
          $el = $(e.target);
          switch ($el.data('action')) {
            case 'launch_settings_menu':
              return _this.launch_settings_menu();
          }
        };
      })(this));
    };

    return Block;

  })(RenderedObject);

  World.Block = Block;

  Biome = (function(superClass) {
    extend(Biome, superClass);

    function Biome() {
      Biome.__super__.constructor.apply(this, arguments);
      this.towns = [];
      this.dimensions = [];
    }

    return Biome;

  })(RenderedObject);

  Overworld = (function(superClass) {
    extend(Overworld, superClass);

    function Overworld() {
      Overworld.__super__.constructor.apply(this, arguments);
      this.biomes = [];
      this.setup_biomes();
    }

    Overworld.prototype.setup_biomes = function() {};

    return Overworld;

  })(RenderedObject);

  Resident = (function(superClass) {
    extend(Resident, superClass);

    Resident.male_names = ['Sonny', 'Art', 'Brett', 'Perry', 'Humberto', 'Carmine', 'Bernard', 'Myles', 'Frances', 'Octavio', 'Edmundo', 'Alan', 'Leland', 'Derek', 'Jamaal', 'Cecil', 'Kenton', 'Elwood', 'Buford', 'Mac'];

    Resident.female_names = ['Celinda', 'Robena', 'Bonita', 'Katy', 'Esmeralda', 'Danae', 'Rena', 'Amberly', 'Tillie', 'Emily', 'Margareta', 'Shenita', 'Lavon', 'Willene', 'Felisha', 'Joaquina', 'Regine', 'Sheena', 'Denice', 'Rona'];

    Resident.gender_weight_male = .65;

    Resident.random_name = function(gender) {
      var name;
      if (gender == null) {
        gender = 'male';
      }
      name = gender === 'male' ? this.male_names[Math.floor(Math.random() * Resident.male_names.length)] : this.female_names[Math.floor(Math.random() * Resident.female_names.length)];
      return name;
    };

    function Resident() {
      var ref;
      Resident.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('idle');
      this.house = this.opts.house;
      this.house_id = (ref = this.house) != null ? ref.id : void 0;
      this.employer = this.opts.employer;
      this.role = null;
      this.setup_stats();
    }

    Resident.prototype.setup_stats = function() {
      this.gender = Math.random() > Resident.gender_weight_male ? 'female' : 'male';
      this.name = Resident.random_name(this.gender);
      this.sleep_schedule = {
        goto_bed: WorldClock.duration('9', 'hours'),
        wake_up: WorldClock.duration('2', 'hours')
      };
      return this.work_schedule = {
        goto_work: WorldClock.duration('4', 'hours'),
        leave_work: WorldClock.duration('7', 'hours')
      };
    };

    Resident.prototype.default_opts = function() {
      return _.extend(Resident.__super__.default_opts.apply(this, arguments), {
        house: null,
        employer: null
      });
    };

    Resident.prototype.update = function(clock) {
      this.state.update();
      switch (this.state.current()) {
        case 'goto_bed':
          return this.change_state('sleeping');
        case 'sleeping':
          return this.sleep(clock);
        case 'wake_up':
          return this.change_state('idle');
        case 'goto_work':
          return this.change_state('working');
        case 'working':
          return this.work(clock);
        case 'idle':
          return this.idle(clock);
      }
    };

    Resident.prototype.render = function() {};

    Resident.prototype.sleep = function(clock) {
      var now;
      now = clock.since_midnight();
      if (now > this.sleep_schedule.wake_up && clock.is_morning()) {
        return this.change_state('wake_up');
      }
    };

    Resident.prototype.work = function(clock) {
      var now;
      now = clock.since_midnight();
      if (!this.is_employed() || now > this.work_schedule.leave_work) {
        return this.change_state('idle');
      }
    };

    Resident.prototype.idle = function(clock) {
      var now;
      now = clock.since_midnight();
      if (now > this.sleep_schedule.goto_bed || now < this.sleep_schedule.wake_up) {
        return this.change_state('goto_bed');
      } else if (this.employer && now > this.work_schedule.goto_work) {
        return this.change_state('goto_work');
      }
    };

    Resident.prototype.is_employed = function() {
      return this.employer !== null;
    };

    Resident.prototype.set_employer = function(employer) {
      return this.employer = employer;
    };

    Resident.prototype.assign_role = function(role, force) {
      if (force == null) {
        force = false;
      }
      if (this.role !== null && !force) {
        throw 'Resident already has role';
        return this;
      } else {
        this.container.trigger('role_changed');
        this.role = role;
        return this;
      }
    };

    Resident.prototype.release_role = function() {
      return this.role = null;
    };

    return Resident;

  })(RenderedObject);

  World.Resident = Resident;

  Structure = (function(superClass) {
    extend(Structure, superClass);

    Structure.storage_capacities = [0, 100, 500, 1000, 10000, 99999999];

    Structure.costs = {
      excavation: 50,
      housing: 14,
      farm: 15,
      factory: 25,
      warehouse: 18,
      construction_office: 100,
      homeless_camp: 0,
      "default": 10
    };

    function Structure() {
      Structure.__super__.constructor.apply(this, arguments);
      this.state = new StateManager('idle');
      this.state_timer = new Timer();
      this.type = '';
      this.cost = 1;
      this.construction_time = this.opts.construction_time;
      this.construction_time_remaining = 0;
      this.construction_started = null;
      this.built = false;
      this.employees = this.opts.employees;
      this.max_employees = this.opts.max_employees;
      this.min_employees_to_operate = this.opts.min_employees_to_operate;
      this.operating_cost = this.opts.operating_cost;
      this.lifetime_operating_cost = 0;
      this.address = this.opts.address;
      this.storage = new Storage(Structure.storage_capacities[2]);
      this.construction_tmpl = _.template($('#structure-under-construction-template').html());
      this.needs_workers_tmpl = _.template($('#structure-needs-workers-template').html());
      if (this.opts.begin_construction) {
        this.change_state('begin_construction');
      }
    }

    Structure.prototype.default_opts = function() {
      return _.extend(Structure.__super__.default_opts.apply(this, arguments), {
        name: 'Structure',
        begin_construction: true,
        construction_time: WorldClock.duration(1, 'minutes'),
        employees: [],
        max_employees: 5,
        min_employees_to_operate: 1,
        operating_cost: 10,
        address: new Address()
      });
    };

    Structure.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el;
          e.preventDefault();
          $el = $(e.target);
          switch ($el.data('action')) {
            case 'launch_settings_menu':
              return _this.open_settings_menu();
          }
        };
      })(this));
    };

    Structure.prototype.settings_menu_items = function() {
      return {
        close: 'Close'
      };
    };

    Structure.prototype.settings_item_selected = function(name) {};

    Structure.prototype.setup_settings_menu = function() {
      var items;
      items = this.settings_menu_items();
      console.log('settings items', items);
      return this.settings_menu = new StructureMenu(null, {
        title: this.name,
        items: items
      });
    };

    Structure.prototype.open_settings_menu = function(recreate) {
      var ref;
      if (recreate == null) {
        recreate = false;
      }
      if (!(this.settings_menu || recreate)) {
        this.setup_settings_menu();
      }
      this.settings_menu.open();
      return (ref = this.settings_menu.container) != null ? ref.one("item_selected", (function(_this) {
        return function(e, value) {
          return _this.settings_item_selected(value);
        };
      })(this)) : void 0;
    };

    Structure.prototype.update = function(clock) {
      Structure.__super__.update.apply(this, arguments);
      switch (this.state.current()) {
        case 'begin_construction':
          return this.begin_construction(clock);
        case 'under_construction':
          return this.progress_construction(clock);
        case 'needs_workers':
          return this.needs_workers();
        default:
          if (this.min_employees_to_operate > 0 && this.employees.length < this.min_employees_to_operate) {
            return this.state.change_state('needs_workers');
          }
          return this.operating(clock);
      }
    };

    Structure.prototype.progress_construction = function(clock) {
      this.construction_time_remaining = this.state_timer.remaining;
      if (this.state_timer.is_complete()) {
        return this.finish_construction();
      }
    };

    Structure.prototype.is_under_construction = function() {
      return this.state.current() === 'under_construction' || this.state.current() === "begin_construction";
    };

    Structure.prototype.begin_construction = function(clock) {
      this.change_state('under_construction');
      this.state_timer.set_duration(this.construction_time, true, "auto");
      this.construction_started = World.game.clock.now();
      return this.built = false;
    };

    Structure.prototype.finish_construction = function() {
      this.state.change_state('operating');
      return this.built = true;
    };

    Structure.prototype.employ_resident = function(resident) {
      if (resident.is_employed() || this.employees.length === this.max_employees) {
        return false;
      }
      resident.set_employer(this.name);
      return this.employees.push(resident);
    };

    Structure.prototype.fire_resident = function(id) {
      var e, j, key, len, r, ref, ref1, remove_key;
      remove_key = -1;
      ref = this.employees;
      for (key = j = 0, len = ref.length; j < len; key = ++j) {
        r = ref[key];
        if (r.id === id) {
          remove_key = key;
        }
      }
      if (remove_key > -1) {
        e = this.employees.splice(remove_key, 1);
        return (ref1 = e[0]) != null ? ref1.set_employer(null) : void 0;
      }
    };

    Structure.prototype.has_jobs_available = function() {
      return !!(this.max_employees > 0 && this.employees.length < this.max_employees && !this.is_under_construction());
    };

    Structure.prototype.get_view_data = function() {
      var vdata;
      vdata = {};
      switch (this.state.current()) {
        case 'under_construction':
          vdata = {
            structure: null,
            construction_time: this.construction_time,
            construction_time_remaining: this.state_timer.remaining(),
            construction_percent_complete: this.state_timer.percent_complete(),
            construction_time_nice: moment.duration(this.construction_time_remaining, 'milliseconds').humanize()
          };
          break;
        case 'needs_workers':
          vdata = {
            built: this.built,
            structure_id: this.id
          };
          break;
        default:
          vdata = {
            built: this.built,
            structure: this
          };
      }
      vdata.state = this.state;
      vdata.min_employees_to_operate = this.opts.min_employees_to_operate;
      return vdata;
    };

    Structure.prototype.needs_workers = function() {
      if (this.min_employees_to_operate === 0 || this.employees.length >= this.min_employees_to_operate) {
        return this.state.change_state('operating');
      }
    };

    Structure.prototype.operating = function(clock) {};

    Structure.prototype.render = function() {
      if (this.state.current() === "under_construction") {
        this.container.empty();
        return this.container.html(this.construction_tmpl(this.get_view_data()));
      } else if (this.state.current() === "needs_workers") {
        this.container.empty();
        return this.container.html(this.needs_workers_tmpl(this.get_view_data()));
      } else {
        return Structure.__super__.render.call(this, true);
      }
    };

    Structure.prototype.get_stored_items = function(type) {
      var items;
      if (type == null) {
        type = null;
      }
      return items = type === null ? this.storage.get_items() : this.storage.get_num_items_by_type(type);
    };

    Structure.prototype.store_items = function(type, amount, all_or_nothing) {
      if (amount == null) {
        amount = 1;
      }
      if (all_or_nothing == null) {
        all_or_nothing = true;
      }
      return this.storage.store_items(type, amount, all_or_nothing);
    };

    Structure.prototype.retrieve_items = function(type, amount) {
      if (type == null) {
        type = 'all';
      }
      if (amount == null) {
        amount = 1;
      }
      return this.storage.retrieve_items(type, amount);
    };

    return Structure;

  })(RenderedObject);

  Crop = (function(superClass) {
    extend(Crop, superClass);

    function Crop() {
      Crop.__super__.constructor.apply(this, arguments);
      this.can_grow_at_night = this.opts.can_grow_at_night;
      this.drops_seeds = this.opts.drops_seeds;
      this.harvest_amount = this.opts.harvest_amount;
      this.units = this.opts.units;
      this.growth_rate = this.opts.growth_rate;
      this.planting_rate = this.opts.planting_rate;
      this.harvest_rate = this.opts.harvest_rate;
      this.needs_water = this.opts.needs_water;
      this.type = this.opts.type;
      this.spacing = 2;
      this.state_timer = new Timer();
      this.actual_harvest_amount = 0;
      this.value = this.opts.value;
      this.state.change_state('idle');
      this.is_planted = false;
      this.current_growth = 0;
    }

    Crop.prototype.default_opts = function() {
      return _.extend(Crop.__super__.default_opts.apply(this, arguments), {
        can_grow_at_night: false,
        growth_rate: .9,
        planting_rate: .1,
        harvest_rate: .1,
        drops_seeds: true,
        harvest_amount: [1, 3],
        needs_water: true,
        type: '',
        value: 1,
        units: ''
      });
    };

    Crop.prototype.space_needed = function() {
      return this.spacing;
    };

    Crop.prototype.update = function(clock) {
      Crop.__super__.update.apply(this, arguments);
      switch (this.state.current()) {
        case 'idle':
          return this.idle();
        case 'planting':
          return this.planting();
        case 'growing':
          return this.growing();
        case 'harvesting':
          return this.harvesting();
        case 'harvested':
          return this.harvested();
        case 'fully_grown':
          return this.fully_grown();
      }
    };

    Crop.prototype.plant_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.planting_rate, 'seconds');
    };

    Crop.prototype.growth_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.growth_rate, 'seconds');
    };

    Crop.prototype.harvest_rate_to_ticks = function() {
      return WorldClock.duration(100 * this.harvest_rate, 'seconds');
    };

    Crop.prototype.idle = function() {};

    Crop.prototype.reset_growth = function() {};

    Crop.prototype.start_planting = function() {
      this.state.change_state('planting');
      return this.state_timer.set_duration(this.plant_rate_to_ticks(), true, "auto");
    };

    Crop.prototype.planting = function(clock) {
      if (this.state_timer.is_complete()) {
        return this.planting_finished();
      }
    };

    Crop.prototype.planting_finished = function() {
      this.is_planted = true;
      this.container.trigger('planting_finished');
      this.state.change_state('growing');
      return this.state_timer.set_duration(this.growth_rate_to_ticks(), true, "auto");
    };

    Crop.prototype.calculate_harvest_amount = function() {
      return Math.floor(Math.random() * this.harvest_amount[1]) + this.harvest_amount[0];
    };

    Crop.prototype.start_harvest = function() {
      this.state.change_state('harvesting');
      return this.state_timer.set_duration(this.harvest_rate_to_ticks(), true, "auto");
    };

    Crop.prototype.harvesting = function() {
      if (this.state_timer.is_complete()) {
        this.actual_harvest_amount = this.calculate_harvest_amount();
        return this.state.change_state('harvested');
      }
    };

    Crop.prototype.harvested = function() {};

    Crop.prototype.growing = function(clock) {
      if (Math.random() < (this.growth_rate * 10)) {
        this.current_growth += this.growth_rate;
        if (this.current_growth > 10) {
          return this.finish_growing();
        }
      }
    };

    Crop.prototype.current_growth_percent = function() {
      return Math.min(1, this.current_growth / 10);
    };

    Crop.prototype.finish_growing = function() {
      return this.state.change_state('fully_grown');
    };

    Crop.prototype.fully_planted = function() {
      return this.is_planted;
    };

    Crop.prototype.fully_grown = function() {
      return this.state.current() === "fully_grown";
    };

    Crop.prototype.fully_harvested = function() {
      return this.state.current() === "harvested";
    };

    Crop.prototype.harvested_amount = function() {
      return this.actual_harvest_amount;
    };

    return Crop;

  })(RenderedObject);

  some_crops = {
    wheat: {
      name: 'Wheat'
    },
    potatos: {
      name: 'Potatos'
    },
    carrots: {
      name: 'Carrots'
    },
    rice: {
      name: 'Rice'
    },
    grapes: {
      name: 'Grapes'
    }
  };

  some_crop_menu_items = {};

  for (key in some_crops) {
    crop = some_crops[key];
    some_crop_menu_items[key] = crop.name;
    some_crops[key] = new Crop(null, _.extend(crop, {
      type: key
    }));
  }

  Structure.Farm = (function(superClass) {
    extend(Farm, superClass);

    function Farm() {
      Farm.__super__.constructor.apply(this, arguments);
      this.type = "farm";
      this.available_crops = some_crops;
      this.crop = this.opts.crop;
      this.till_soil_time = WorldClock.duration(.3, 'minutes');
      this.harvest_time = 0;
      this.soil_ready = false;
      this.acres = 1;
      this.crop_plots = 0;
      this.plots_per_acre = 0;
      this.current_growth_percent = 0;
      this.planted_crops = [];
      this.harvested_crops = [];
      this.last_harvest_amount = 0;
      this.state_timer = new Timer();
      this.plots_available();
    }

    Farm.prototype.default_opts = function() {
      return _.extend(Farm.__super__.default_opts.apply(this, arguments), {
        name: 'Skillet Farms',
        construction_time: WorldClock.duration(5, 'seconds'),
        crop: null,
        available_crops: []
      });
    };

    Farm.prototype.get_view_data = function() {
      var percent_complete;
      if (this.is_under_construction()) {
        return Farm.__super__.get_view_data.apply(this, arguments);
      }
      percent_complete = this.state.current() === "growing" ? this.current_growth_percent : this.state_timer.percent_complete();
      return _.extend(Farm.__super__.get_view_data.apply(this, arguments), {
        num_employees: this.employees.length,
        crop: this.crop,
        crop_state: this.crop_state,
        state: this.state,
        percent_complete: Math.min(100, Math.round(percent_complete * 100)),
        soil_ready: this.soil_ready,
        harvested_crops: this.harvested_crops,
        planted_crops: this.planted_crops,
        crops_harvested: this.last_harvest_amount,
        crops_stored: this.storage.get_num_items()
      });
    };

    Farm.prototype.template_id = function() {
      return '#farm-template';
    };

    Farm.prototype.settings_menu_items = function() {
      return {
        view_info: 'Stats',
        change_crop: 'Change Crop',
        close: 'Close'
      };
    };

    Farm.prototype.begin_construction = function() {
      this.construction_time = WorldClock.duration(10, 'seconds');
      return Farm.__super__.begin_construction.apply(this, arguments);
    };

    Farm.prototype.setup_events = function() {
      return this.container.on('click', (function(_this) {
        return function(e) {
          var $el, select_crop_menu;
          e.preventDefault();
          $el = $(e.target);
          switch ($el.data('action')) {
            case 'select_crop':
              select_crop_menu = new SelectCropMenu(null, {
                open: true,
                items: some_crop_menu_items,
                position_for: [e.clientX, e.clientY]
              });
              return select_crop_menu.container.on('item_selected', function(e, value) {
                if (_.has(_this.available_crops, value)) {
                  return _this.set_crop(_this.available_crops[value]);
                }
              });
            case 'start_tilling':
              return _this.state.change_state('start_tilling');
          }
        };
      })(this));
    };

    Farm.prototype.operating = function(clock) {
      Farm.__super__.operating.apply(this, arguments);
      switch (this.state.current()) {
        case 'operating':
          return this.state.change_state('idle');
        case 'idle':
          return this.idle();
        case 'start_tilling':
          return this.start_tilling();
        case 'tilling_soil':
          return this.till_soil(clock);
        case 'planting':
          return this.planting(clock);
        case 'growing':
          return this.growing(clock);
        case 'harvest':
          return this.harvest(clock);
        case 'reset':
          return this.reset(clock);
      }
    };

    Farm.prototype.idle = function() {};

    Farm.prototype.can_change_crop = function() {
      return this.state.current() === "idle";
    };

    Farm.prototype.crops_per_acre = function() {
      if (!this.crop) {
        return;
      }
      this.plots_per_acre = 10 / this.crop.spacing;
      this.crop_plots = Math.floor(this.plots_per_acre * this.acres);
      this.harvest_time = this.crop_plots;
      return this.plots_per_acre;
    };

    Farm.prototype.total_plots = function() {
      return Math.floor(this.plots_per_acre * this.acres);
    };

    Farm.prototype.plots_available = function() {
      return this.total_plots() - this.planted_crops.length;
    };

    Farm.prototype.set_crop = function(new_crop, start_planting) {
      if (start_planting == null) {
        start_planting = true;
      }
      if (!this.can_change_crop()) {
        return;
      }
      this.crop = new_crop;
      this.crops_per_acre();
      if (start_planting) {
        if (this.state.current() !== 'idle') {
          return this.reset();
        } else {
          return this.start_tilling();
        }
      }
    };

    Farm.prototype.start_tilling = function() {
      this.state.change_state('tilling_soil');
      return this.state_timer.set_duration(this.till_soil_time * (1 - this.employees.length * .05), true, "auto");
    };

    Farm.prototype.till_soil = function(clock) {
      if (this.state_timer.is_complete()) {
        return this.start_planting();
      }
    };

    Farm.prototype.start_planting = function() {
      this.soil_ready = true;
      this.state.change_state('planting');
      return this.state_timer.set_duration(this.crop_plots, true, "manual");
    };

    Farm.prototype.planting = function(clock) {
      var last, new_plant;
      if (!(clock.is_afternoon() || Town.night_farming)) {
        return;
      }
      last = this.planted_crops.length ? this.planted_crops.length - 1 : false;
      if (last !== false && !this.planted_crops[last].fully_planted()) {
        this.planted_crops[last].update(clock);
        if (this.planted_crops[last].fully_planted()) {
          this.state_timer.update();
        }
      } else if (this.planted_crops.length < this.crop_plots) {
        new_plant = new Crop(null, this.available_crops[this.crop.type]);
        new_plant.start_planting();
        this.planted_crops.push(new_plant);
      }
      if (this.state_timer.is_complete()) {
        return this.finish_planting();
      }
    };

    Farm.prototype.finish_planting = function(trigger_event) {
      if (trigger_event == null) {
        trigger_event = 'complete';
      }
      if (trigger_event != null) {
        this.container.trigger("planting_" + trigger_event);
      }
      this.state.change_state('growing');
      return this.state_timer.set_duration(this.crop_plots, true, "manual");
    };

    Farm.prototype.growing = function(clock) {
      var c, j, len, ref, total_growth_percent;
      total_growth_percent = 0;
      ref = this.planted_crops;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        c.update(clock);
        total_growth_percent += c.current_growth_percent();
        if (c.fully_grown()) {
          this.state_timer.update();
        }
      }
      this.current_growth_percent = total_growth_percent / this.planted_crops.length;
      if (this.state_timer.is_complete()) {
        return this.begin_harvest();
      }
    };

    Farm.prototype.begin_harvest = function() {
      this.state.change_state('harvest');
      this.state_timer.set_duration(this.harvest_time, true, "manual");
      return this.last_harvest_amount = 0;
    };

    Farm.prototype.harvest = function(clock) {
      var last, next_plant;
      last = this.harvested_crops.length ? this.harvested_crops.length - 1 : false;
      if (last !== false && !this.harvested_crops[last].fully_harvested()) {
        this.harvested_crops[last].update(clock);
        if (this.harvested_crops[last].fully_harvested()) {
          this.state_timer.update();
          this.last_harvest_amount += this.harvested_crops[last].harvested_amount();
        }
      } else if (this.planted_crops.length > 0) {
        next_plant = this.planted_crops.shift();
        next_plant.start_harvest();
        this.harvested_crops.push(next_plant);
      } else if (!this.planted_crops.length && last && this.harvested_crops[last].fully_harvested()) {
        console.log('Plant harvest count mismatch, finishing');
        while (!this.state_timer.is_complete()) {
          this.state_timer.update(clock);
        }
      }
      if (this.state_timer.is_complete()) {
        return this.finish_harvest();
      }
    };

    Farm.prototype.finish_harvest = function() {
      var couldnt_fit, crop_type;
      this.last_harvest_amount = 0;
      crop_type = this.harvested_crops[0].type;
      while (crop = this.harvested_crops.shift()) {
        this.last_harvest_amount += crop.harvested_amount();
      }
      couldnt_fit = this.store_items(crop_type, this.last_harvest_amount, false);
      if (couldnt_fit > 0) {
        throw "Wasnt enough room to store " + couldnt_fit + " Crops";
      }
      return this.state.change_state('idle');
    };

    Farm.prototype.reset = function(clock) {
      this.state.change_state('idle');
      return this.current_growth_percent = 0;
    };

    Farm.prototype.replant = function() {
      return this.state.change_state('.planting');
    };

    return Farm;

  })(Structure);

  Structure.Factory = (function(superClass) {
    extend(Factory, superClass);

    function Factory() {
      return Factory.__super__.constructor.apply(this, arguments);
    }

    Factory.prototype.template_id = function() {
      return '#factory-template';
    };

    return Factory;

  })(Structure);

  _house_ids = "abcdefghijklmnopqrstuvwxyz";

  _house_idx = 0;

  _next_house_name = function() {
    var i, j, letter, letters, ref;
    letter = _house_ids[_house_idx % _house_ids.length];
    letters = "";
    for (i = j = 0, ref = Math.floor(_house_idx / _house_ids.length) + 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      letters += letter;
    }
    _house_idx += 1;
    return "Housing Complex " + (letters.toUpperCase());
  };

  Structure.Housing = (function(superClass) {
    extend(Housing, superClass);

    function Housing() {
      Housing.__super__.constructor.apply(this, arguments);
      this.type = "housing";
      this.max_occupants = 12;
      this.occupants = 0;
      this.rent_cost = 0;
      this.residents = [];
    }

    Housing.prototype.default_opts = function() {
      return _.extend(Housing.__super__.default_opts.apply(this, arguments), {
        name: _next_house_name(),
        min_employees_to_operate: 0
      });
    };

    Housing.prototype.settings_menu_items = function() {
      return {
        view_info: 'Stats',
        view_occupants: 'Occupants',
        destroy: 'Destroy',
        close: 'Close'
      };
    };

    Housing.prototype.has_vacancy = function() {
      return !this.is_under_construction() && this.occupants < this.max_occupants;
    };

    Housing.prototype.occupancy_percent = function() {
      return this.occupants / this.max_occupants;
    };

    Housing.prototype.vacancy_percent = function() {
      return (this.max_occupants - this.occupants) / this.max_occupants;
    };

    Housing.prototype.begin_construction = function() {
      this.construction_time = WorldClock.duration(.10, 'minutes');
      return Housing.__super__.begin_construction.apply(this, arguments);
    };

    Housing.prototype.move_resident_in = function(resident) {
      if (this.occupants === this.max_occupants) {
        new ErrorAlert('No vacancy!').delayed_dismiss();
        throw 'Max occupants in housing';
      }
      this.occupants += 1;
      return this.residents.push(resident);
    };

    Housing.prototype.move_resident_out = function(resident) {
      var j, len, r, ref, residents_new;
      if (this.occupants === 0) {
        return;
      }
      this.occupants -= 1;
      residents_new = [];
      ref = this.residents;
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        if (resident.id !== r.id) {
          residents_new.push(r);
        }
      }
      return this.residents = residents_new;
    };

    Housing.prototype.get_resident = function(id) {
      var found, j, len, r, ref;
      found = null;
      ref = this.residents;
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        if (r.id = id) {
          found = r;
        }
      }
      return found;
    };

    Housing.prototype.get_view_data = function() {
      var vdata;
      if (this.is_under_construction() || !this.built) {
        return Housing.__super__.get_view_data.apply(this, arguments);
      }
      return vdata = {
        structure: this,
        occupants: this.residents
      };
    };

    Housing.prototype.template_id = function() {
      return '#housing-template';
    };

    return Housing;

  })(Structure);

  DeliveryTruck = (function(superClass) {
    extend(DeliveryTruck, superClass);

    DeliveryTruck.capacities = [0, 100, 500, 1000];

    DeliveryTruck.prototype.get_default_opts = function() {
      return {
        driver: null,
        passenger: null,
        destination: null,
        drive_speed: 1,
        capacity: 1,
        warehouse_address: new Address()
      };
    };

    function DeliveryTruck(opts) {
      if (opts == null) {
        opts = {};
      }
      DeliveryTruck.__super__.constructor.apply(this, arguments);
      this.opts = _.extend(this.get_default_opts(), opts);
      this.driver = this.opts.driver;
      this.passenger = this.opts.passenger;
      this.drive_speed = this.opts.drive_speed;
      this.capacity = this.opts.capacity;
      this.warehouse_address = this.opts.warehouse_address;
      this.storage = new Storage(this.actual_capacity());
      this.set_destination(this.opts.destination);
      this.current_location = this.warehouse_address;
      this.state.on('state_changed', (function(_this) {
        return function(current, previous) {
          return console.log('truck change', current, previous);
        };
      })(this));
    }

    DeliveryTruck.prototype.update = function(clock) {
      DeliveryTruck.__super__.update.apply(this, arguments);
      switch (this.state.current()) {
        case 'driving':
          return this.driving();
        case 'loading':
          return this.loading();
        case 'unloading':
          return this.unloading();
        case 'parked':
          if (this.is_at_warehouse() && this.has_driver() && this.destination) {
            return this.set_destination(this.destination, false, true);
          }
      }
    };

    DeliveryTruck.prototype.actual_capacity = function() {
      if (this.capacity >= DeliveryTruck.capacities.length || this.capacity < 0) {
        return 0;
      } else {
        return DeliveryTruck.capacities[this.capacity];
      }
    };

    DeliveryTruck.prototype.begin_loading = function() {
      this.state.change_state('loading');
      return this.state_timer.set_duration(10, true, "auto");
    };

    DeliveryTruck.prototype.begin_unloading = function() {
      this.state.change_state('unloading');
      return this.state_timer.set_duration(this.storage.get_num_items() * 1, true, "auto");
    };

    DeliveryTruck.prototype.set_driver = function(resident) {
      if (!this.is_parked()) {
        return;
      }
      this.driver = resident;
      return resident.assign_role('truck_driver');
    };

    DeliveryTruck.prototype.release_driver = function(resident) {
      if (!this.driver) {
        return;
      }
      this.driver.release_role();
      return this.driver = null;
    };

    DeliveryTruck.prototype.has_driver = function() {
      return this.driver !== null;
    };

    DeliveryTruck.prototype.set_passenger = function(resident) {
      if (!this.is_parked()) {
        return;
      }
      return this.passenger = resident;
    };

    DeliveryTruck.prototype.park = function(release_driver) {
      if (release_driver == null) {
        release_driver = true;
      }
      this.state.change_state('parked');
      if (release_driver) {
        return this.release_driver();
      }
    };

    DeliveryTruck.prototype.is_parked = function() {
      return this.state.current() === "parked";
    };

    DeliveryTruck.prototype.is_in_service = function() {
      return true;
    };

    DeliveryTruck.prototype.is_available = function() {
      return this.is_parked() && this.is_in_service();
    };

    DeliveryTruck.prototype.is_at_destination = function() {
      return Address.compare(this.current_location, this.destination_address);
    };

    DeliveryTruck.prototype.is_at_warehouse = function() {
      return Address.compare(this.current_location, this.warehouse_address);
    };

    DeliveryTruck.prototype.set_destination = function(destination, is_address, start_driving) {
      var travel_time;
      if (destination == null) {
        destination = null;
      }
      if (is_address == null) {
        is_address = false;
      }
      if (start_driving == null) {
        start_driving = false;
      }
      if (!destination) {
        return;
      }
      if (is_address) {
        this.destination_address = destination;
      } else {
        this.destination_address = destination.address;
        this.destination = destination;
      }
      travel_time = World.gps.get_travel_time_between(this.current_location, this.destination_address, this.drive_speed);
      this.state_timer.set_duration(travel_time, true, "auto");
      if (start_driving && this.has_driver()) {
        return this.state.change_state('driving');
      }
    };

    DeliveryTruck.prototype.return_to_warehouse = function() {
      if (!this.warehouse_address.is_valid()) {
        return;
      }
      return this.set_destination(this.warehouse_address, true, true);
    };

    DeliveryTruck.prototype.driving = function() {
      if (this.state_timer.is_complete()) {
        this.current_location = this.destination_address;
        if (this.is_at_warehouse()) {
          return this.begin_unloading();
        } else if (this.is_at_destination()) {
          return this.begin_loading();
        }
      }
    };

    DeliveryTruck.prototype.loading = function() {
      var items, total_amount;
      if (this.state_timer.is_complete()) {
        items = {};
        total_amount = 0;
        if (this.destination) {
          this.storage.take_all_items_from(this.destination.storage, 'all');
        }
        return this.return_to_warehouse();
      }
    };

    DeliveryTruck.prototype.unloading = function() {
      if (this.state_timer.is_complete()) {
        return this.state.change_state('unloading_complete');
      }
    };

    return DeliveryTruck;

  })(StateObject);

  Structure.Warehouse = (function(superClass) {
    extend(Warehouse, superClass);

    function Warehouse() {
      Warehouse.__super__.constructor.apply(this, arguments);
      this.num_trucks = this.opts.num_trucks;
      this.num_trucks_available = 0;
      this.trucks = [];
      this.storage_capacity = 1000;
      this.total_stored = 0;
      this.pickup_queue = [];
      this.delivery_queue = [];
      this.setup_delivery_trucks();
    }

    Warehouse.prototype.default_opts = function() {
      return _.extend(Warehouse.__super__.default_opts.apply(this, arguments), {
        name: 'Warehouse',
        construction_time: WorldClock.duration(10, 'seconds'),
        num_trucks: 3,
        max_employees: 5
      });
    };

    Warehouse.prototype.get_view_data = function() {
      return _.extend(Warehouse.__super__.get_view_data.apply(this, arguments), {
        trucks_available: this.num_trucks_available
      });
    };

    Warehouse.prototype.template_id = function() {
      return '#warehouse-template';
    };

    Warehouse.prototype.settings_menu_items = function() {
      return {
        view_info: 'Stats',
        close: 'Close'
      };
    };

    Warehouse.prototype.settings_item_selected = function(value) {
      switch (value) {
        case 'view_info':
          World.Popup.Create({
            title: this.name + " Stats",
            wide: true,
            body_template: "#warehouse-stats-template",
            view_data: {
              warehouse: this
            }
          });
          return this.close_settings_menu();
      }
    };

    Warehouse.prototype.operating = function(clock) {
      if (this.is_under_construction()) {
        return;
      }
      this.update_trucks(clock);
      if (this.pickup_queue.length) {
        if (this.num_trucks_available) {
          return this.send_truck_to_next_pickup();
        }
      }
    };

    Warehouse.prototype.update_trucks = function(clock) {
      var j, len, ref, t;
      ref = this.trucks;
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        t.update(clock);
        if (t.state.current() === "unloading_complete") {
          this.storage.take_all_items_from(t.storage);
          t.park();
        }
      }
      return this.get_num_trucks_available();
    };

    Warehouse.prototype.setup_delivery_trucks = function() {
      var i, j, new_truck, ref, results1;
      results1 = [];
      for (i = j = 1, ref = this.num_trucks; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        new_truck = new DeliveryTruck({
          warehouse_address: this.address
        });
        new_truck.park();
        results1.push(this.trucks.push(new_truck));
      }
      return results1;
    };

    Warehouse.prototype.next_available_truck = function() {
      var j, len, ref, t, truck;
      truck = null;
      ref = this.trucks;
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        if (!truck && t.is_parked()) {
          truck = t;
        }
      }
      return truck;
    };

    Warehouse.prototype.queue_delivery = function(where) {};

    Warehouse.prototype.send_truck_to_delivery = function(delivery) {};

    Warehouse.prototype.send_truck_to_next_delivery = function() {};

    Warehouse.prototype.assign_driver = function(truck) {
      var employee, j, len, ref;
      if (truck.has_driver()) {
        return truck;
      }
      ref = this.employees;
      for (j = 0, len = ref.length; j < len; j++) {
        employee = ref[j];
        if (!employee.role) {
          truck.set_driver(employee);
          break;
        }
      }
      return truck;
    };

    Warehouse.prototype.queue_pickup = function(where) {
      return this.pickup_queue.push(where);
    };

    Warehouse.prototype.send_truck_to_pickup = function(loc) {
      var truck;
      truck = this.next_available_truck();
      this.assign_driver(truck);
      return truck.set_destination(loc, false, true);
    };

    Warehouse.prototype.send_truck_to_next_pickup = function() {
      if (!this.pickup_queue.length) {
        return false;
      }
      return this.send_truck_to_pickup(this.pickup_queue.shift());
    };

    Warehouse.prototype.get_num_trucks_available = function() {
      var count, j, len, ref, t;
      if (!this.trucks.length) {
        return 0;
      }
      count = 0;
      ref = this.trucks;
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        if (t.is_available()) {
          count += 1;
        }
      }
      return this.num_trucks_available = Math.min(this.employees.length, count);
    };

    return Warehouse;

  })(Structure);

  Structure.ConstructionOffice = (function(superClass) {
    extend(ConstructionOffice, superClass);

    function ConstructionOffice() {
      return ConstructionOffice.__super__.constructor.apply(this, arguments);
    }

    ConstructionOffice.prototype.template_id = function() {
      return '#construction-office-template';
    };

    ConstructionOffice.prototype.default_opts = function() {
      return _.extend(ConstructionOffice.__super__.default_opts.apply(this, arguments), {
        min_employees_to_operate: 3
      });
    };

    return ConstructionOffice;

  })(Structure);

  Structure.HomelessCamp = (function(superClass) {
    extend(HomelessCamp, superClass);

    function HomelessCamp() {
      HomelessCamp.__super__.constructor.apply(this, arguments);
      this.type = "homeless_camp";
    }

    HomelessCamp.prototype.default_opts = function() {
      return _.extend(HomelessCamp.__super__.default_opts.apply(this, arguments), {
        name: "Homeless Camp"
      });
    };

    HomelessCamp.prototype.settings_menu_items = function() {
      return _.extend(HomelessCamp.__super__.settings_menu_items.apply(this, arguments), {
        convert: "Convert"
      });
    };

    return HomelessCamp;

  })(Structure.Housing);

  Player = (function() {
    function Player() {}

    return Player;

  })();

  pin = function(extra) {
    if (extra == null) {
      extra = null;
    }
    return console.log("Hit pin " + (this.id ? this.id += 1 : this.id = 1), extra);
  };

  $(function() {
    return typeof World !== "undefined" && World !== null ? World.window_overlay = new Overlay('.window-overlay') : void 0;
  });

  ModTownGame = (function(superClass) {
    extend(ModTownGame, superClass);

    function ModTownGame() {
      ModTownGame.__super__.constructor.apply(this, arguments);
      this.clock = new WorldClock();
      _.defer((function(_this) {
        return function() {
          return _this.flux_menu = new FluxMenu(null, {
            clock: _this.clock
          });
        };
      })(this));
      this.weather = new WeatherSystem();
      this.state = new StateManager('init');
      this.setup_player();
      this.setup_hud();
      this.setup_overworld();
      this.setup_town();
      this.setup_events();
      this.state.change_state('running');
      this.clock.on_tick((function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
      this.clock.tick();
    }

    ModTownGame.prototype.setup_player = function() {
      return this.player = new Player();
    };

    ModTownGame.prototype.setup_town = function() {
      var town_opts;
      town_opts = {
        name: 'AhhsumTown',
        balance: 1000
      };
      this.town = new Town(this.container.find('#town'), town_opts);
      return _.defer((function(_this) {
        return function() {
          _this.town.create_street({
            blocks: 2
          });
          return _this.town.create_street({
            blocks: 2
          });
        };
      })(this));
    };

    ModTownGame.prototype.setup_overworld = function() {
      return this.overworld = new Overworld();
    };

    ModTownGame.prototype.setup_hud = function() {
      this.hud = new HUD(this.container.find('#hud'), {
        town: this.town
      });
      return this.hud.container.on('btn_pressed', (function(_this) {
        return function(e, action) {
          var $el;
          $el = $("[data-action=" + action + "]");
          switch (action) {
            case 'add_street':
              return _this.town.create_street({
                blocks: 1
              });
            case 'pause':
              $el.text('Resume').data('action', 'resume');
              return _this.pause();
            case 'resume':
              $el.text('Pause').data('action', 'pause');
              return _this.resume();
          }
        };
      })(this));
    };

    ModTownGame.prototype.pause = function(resume_in) {
      if (resume_in == null) {
        resume_in = null;
      }
      this.state.change_state('paused');
      if (this.timeout) {
        clearInterval(this.timeout);
      }
      if (resume_in) {
        return setTimeout((function(_this) {
          return function() {
            return _this.resume();
          };
        })(this), resume_in);
      }
    };

    ModTownGame.prototype.resume = function() {
      return this.state.change_state('running');
    };

    ModTownGame.prototype.update = function() {
      this.state.update();
      switch (this.state.current()) {
        case 'running':
          this.weather.update(this.clock);
          this.town.update(this.clock, this.weather);
          this.hud.update({
            town: this.town,
            player: this.player,
            clock: this.clock,
            weather: this.weather
          });
      }
      return this.render();
    };

    ModTownGame.prototype.render = function() {
      ModTownGame.__super__.render.apply(this, arguments);
      switch (this.state.current()) {
        case 'running':
          this.hud.render();
          return this.town.render();
        case 'overworld':
          return this.hud.render();
      }
    };

    return ModTownGame;

  })(RenderedObject);

  $(function() {
    World.game = new ModTownGame("#container");
    return World.gps = new GPS(World.game.town);
  });

}).call(this);
